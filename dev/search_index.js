var documenterSearchIndex = {"docs":
[{"location":"toc/#Table-of-contents","page":"Table of Contents","title":"Table of contents","text":"","category":"section"},{"location":"toc/","page":"Table of Contents","title":"Table of Contents","text":"Depth = 4","category":"page"},{"location":"RadCalNet/#RadCalNet","page":"RadCalNet","title":"RadCalNet","text":"","category":"section"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"Radiation properties machine learning model trained on RadCal.","category":"page"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"In this project we use the re-implementation of RadCal [1] to generate data and train a machine learning model for the prediction of radiative properties, i.e. emissivity and transmissivity, of common combustion flue gases.","category":"page"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"This is done because for real-time calls of RADCAL might be computationally prohibitive, for instance in CFD applications. Thus, a neural network is trained with Flux based on the simulated data and this module provides an interface to call the network from external programs (Ansys Fluent, OpenFOAM, ...).","category":"page"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"For details of validity ranges and sample space, please check function RadCalNet.datasampler!, where random sampling is provided. Indexing of species array is documented at RadCalNet.runradcalinput.","category":"page"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"Below we display the quality of fitting of model. One must notice that fitting of emissivity still needs a few adjustments, while transmissivity is well predicted over the whole range.","category":"page"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"(Image: Model testing)","category":"page"},{"location":"RadCalNet/#Usage","page":"RadCalNet","title":"Usage","text":"","category":"section"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"CurrentModule = RadCalNet","category":"page"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"The following snippet illustrates everything the model was designed to do.","category":"page"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"julia> using RadCalNet;\n\njulia> x = Float32[1200.0; 1000.0; 2.0; 1.0; 0.1; 0.2; 0.1];\n\njulia> y = RadCalNet.model(x)\n2-element Vector{Float32}:\n 0.3231391\n 0.6287435","category":"page"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"The array of inputs x is defined below, and y provides gas emissitivy and transmissivity, respectively. Notice that x must be a column vector with entries of type Float32.","category":"page"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"Index Quantity Units Minimum Maximum\n1 Wall temperature K 300 2500\n2 Gas temperature K 300 2500\n3 Depth m 0.1 3.0\n4 Pressure atm 0.5 1.5\n5 CO2 mole fraction - 0.0 0.25\n6 H2O mole fraction - 0.0 0.30\n7 CO  mole fraction - 0.0 0.20","category":"page"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"For practical applications, one generally is interested in calling the model with a large inputs set. Belowe we illustrate how to do this with a block of data and verify the predictions are within the model tolerance on average.","category":"page"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"using WallyToolbox\nusing RadCalNet\nusing Flux: mae\n\n# Loss after last training.\nLOSS = 0.0022\n\n# Random sample data randomly extracted (20 rows).\nTESTDATA = Float32[\n    1670.0   960.0  1.9  0.5  0.15  0.18  0.03   0.161774   0.820025\n    1230.0   320.0  1.9  1.0  0.04  0.08  0.18   0.20205    0.79694\n    1760.0   770.0  2.1  1.5  0.22  0.24  0.12   0.309017   0.669564\n    1770.0   960.0  1.9  0.5  0.15  0.0   0.13   0.0721235  0.919333\n     350.0  1590.0  1.9  1.0  0.06  0.29  0.12   0.357215   0.169437\n    2330.0  1820.0  1.1  1.5  0.13  0.08  0.13   0.100282   0.840802\n    1220.0  2070.0  0.2  0.5  0.11  0.17  0.09   0.0361672  0.902581\n     760.0  1380.0  1.9  1.5  0.1   0.01  0.10   0.188531   0.69798\n    1870.0  1880.0  0.2  1.5  0.14  0.28  0.17   0.0819803  0.858508\n    1910.0  2220.0  1.3  1.5  0.2   0.3   0.09   0.202592   0.63856\n    2290.0   360.0  1.8  0.5  0.0   0.23  0.07   0.0755366  0.914045\n    1330.0   640.0  1.7  1.5  0.21  0.04  0.06   0.227428   0.764363\n    1090.0  1260.0  1.9  1.5  0.17  0.18  0.18   0.381407   0.501751\n    1250.0  1590.0  0.4  1.5  0.13  0.27  0.18   0.191725   0.688272\n     990.0  2320.0  0.5  1.0  0.23  0.27  0.03   0.118285   0.633932\n    1920.0   720.0  0.3  1.0  0.05  0.03  0.18   0.0496579  0.945693\n    1250.0   310.0  0.6  1.0  0.04  0.18  0.15   0.171857   0.827273\n    1990.0  1020.0  1.3  1.0  0.09  0.11  0.15   0.140596   0.837042\n    1180.0  1830.0  0.3  0.5  0.09  0.29  0.02   0.0682171  0.851304\n    2120.0  1230.0  2.9  1.5  0.03  0.06  0.17   0.168034   0.791942\n]\n\n# Predictors and targets transposed.\nX = transpose(TESTDATA[:, 1:7])\nY = transpose(TESTDATA[:, 8:9])\n\nmae(RadCalNet.model(X), Y) <= LOSS\n\n# output\n\ntrue","category":"page"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"The following test can also be seen as a tutorial for data generation, where we make the verification of data generation with provided seed.  See RadCalNet.createcustomdatabase for more details. An alternative RadCalNet.datasampler! can be provided for specific problems.","category":"page"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"import Random\nusing WallyToolbox\nusing RadCalNet\n\nfunction sampledatabase()\n    #XXX: documentation is run from root directory!\n    testname = joinpath(joinpath(@__DIR__, \"src/RadCalNet/data/sample.dat\"))\n\n    # Provide a seed at start-up for *maybe* reproducible builds.\n    Random.seed!(42)\n\n    if !isfile(testname)\n        RadCalNet.createcustomdatabase(;\n            sampler!   = RadCalNet.datasampler!,\n            repeats    = 3,\n            samplesize = 3,\n            cleanup    = true,\n            saveas     = testname,\n            override   = true\n        )\n    end\n\n    return RadCalNet.loaddatabase(testname)\nend\n\nA = sampledatabase()[:, end-5:end]\n\n# output\n\n9×6 Matrix{Float32}:\n 0.61  0.0006522    0.00680899  0.127997       1.4369f5   0.784483\n 0.63  0.00147905   0.0163017   0.256072   52761.9        0.493376\n 0.8   0.00181013   0.0525569   0.209679    1712.82       0.743175\n 0.69  0.000962085  0.0317917   0.0917254      3.80101f5  0.88582\n 0.69  0.00246231   0.0538234   0.418247    1442.63       0.479691\n 0.68  0.00210072   0.00470752  0.0997078  71325.7        0.79875\n 0.67  0.000770321  0.0101432   0.0812446      3.0696f5   0.815462\n 0.7   0.00154008   0.0215186   0.253691   24945.7        0.478712\n 0.53  0.00133843   0.0180676   0.234852   21784.6        0.7443","category":"page"},{"location":"RadCalNet/#To-do's","page":"RadCalNet","title":"To-do's","text":"","category":"section"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"Broaden sample space over the whole RadCal composition spectrum.\nDefine data loading on GPU/CPU though a flag when recovering model.\nCreate database for testing outside of sampling points.\nImprove model reload and organize a notebook for training.","category":"page"},{"location":"RadCalNet/#Literature-discussion","page":"RadCalNet","title":"Literature discussion","text":"","category":"section"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"using DelimitedFiles\nusing HDF5\nusing Plots\nusing Printf\n\nusing WallyToolbox\nimport RadCalNet\n\nfunction gorogcomposition()\n    X = zeros(14)\n    X[1] = 0.2\n    X[2] = 0.2\n    X[end] = 1.0 - sum(X[1:2])\n    return X\nend\n\nfunction gorogsemissivitydata()\n    pr = collect(0.0:0.015:3.2)\n    Tg = [830.0, 1110.0, 1390.0]\n\n    X = gorogcomposition()\n    prod = Iterators.product(pr, Tg)\n    samplesize = length(pr) * length(Tg)\n    table = zeros(samplesize, 26)\n\n    for (k, (p, T)) in enumerate(prod)\n        table[k, 1:end] = RadCalNet.runradcalinput(;\n            X = X,\n            T = T,\n            L = p / sum(X[1:2]),\n            TWALL = 300.0,\n            FV = 1.0e-15\n        )\n    end\n\n    return table\nend\n\nfunction gorogsabsorptivitydata()\n    pr = collect(0.0:0.01:1.6)\n    Tw = [277.0, 555.0, 833.0]\n\n    X = gorogcomposition()\n    prod = Iterators.product(pr, Tw)\n    samplesize = length(pr) * length(Tw)\n    table = zeros(samplesize, 26)\n\n    for (k, (p, T)) in enumerate(prod)\n        table[k, 1:end] = RadCalNet.runradcalinput(;\n            X = X,\n            T = 1110.0,\n            L = p / sum(X[1:2]),\n            TWALL = T,\n            FV = 1.0e-15\n        )\n    end\n\n    return table\nend\n\nfunction plotgorogsemissitivity(εdata, εgorog)\n    p = plot(dpi = 100, legend = :topleft)\n    scatter!(p, εdata[1][:, 1], εdata[1][:, 2],\n             markerstrokewidth = 0.0, label = \"Gorog\")\n\n    for T in unique(εgorog[:, 4])\n        sel = εgorog[εgorog[:, 4] .== T, :]\n        pr = sum(sel[:, 8:9], dims = 2) .* sel[:, 5]\n        εg = sel[:, 24]\n        plot!(p, pr, εg, label = @sprintf(\"%4.0f K\", T))\n    end\n\n    xlims!(p, 0.0, 3.2)\n    ylims!(p, 0.0, 0.7)\n    xticks!(p, 0.0:0.4:3.2)\n    yticks!(p, 0.0:0.1:0.7)\n\n    xlabel!(p, \"Optical thickness [m-atm]\")\n    ylabel!(p, \"Emissivity\")\n\n    p\nend\n\nfunction plotgorogsabsorptivitydata(αdata, αgorog)\n    p = plot(dpi = 100, legend = :topleft)\n    scatter!(p, αdata[1][:, 1], αdata[1][:, 2],\n             markerstrokewidth = 0.0, label = \"Gorog\")\n\n    for T in unique(αgorog[:, 3])\n        sel = αgorog[αgorog[:, 3] .== T, :]\n        pr = sum(sel[:, 8:9], dims = 2) .* sel[:, 5]\n        αg = 1.0 .- sel[:, end]\n        plot!(p, pr, αg, label = @sprintf(\"%4.0f K\", T))\n    end\n\n    xlims!(p, 0.0, 1.6)\n    ylims!(p, 0.0, 1.0)\n    xticks!(p, 0.0:0.2:1.6)\n    yticks!(p, 0.0:0.2:1.0)\n\n    xlabel!(p, \"Optical thickness [m-atm]\")\n    ylabel!(p, \"Absorptivity\")\n\n    p\nend\n\ndatadir = @__DIR__\n\nεfig = joinpath(datadir, \"media/emissivity.png\")\nαfig = joinpath(datadir, \"media/absorptivity.png\")\n\nεfile = joinpath(datadir, \"data/emissivity.csv\")\nαfile = joinpath(datadir, \"data/absorptivity.csv\")\n\nif !isfile(εfig)\n    εdata = readdlm(εfile, ',', Float64, header = true)\n    εgorog = gorogsemissivitydata()\n    p = plotgorogsemissitivity(εdata, εgorog)\n    png(p, εfig)\nend\n\nif !isfile(αfig)\n    αdata = readdlm(αfile, ',', Float64, header = true)\n    αgorog = gorogsabsorptivitydata()\n    p = plotgorogsabsorptivitydata(αdata, αgorog)\n    png(p, αfig)\nend","category":"page"},{"location":"RadCalNet/#Verification-agains-Gorog's-paper","page":"RadCalNet","title":"Verification agains Gorog's paper","text":"","category":"section"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"Below we compare computed values with those by Gorog et al. [2]. Reference paper is found here.","category":"page"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"(Image: Emissivity)","category":"page"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"(Image: Absorptivity)","category":"page"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"At least qualitative agreement is found and orders of magnitude are right. On the other hand, using directly the model parameters from Tam [3] do not produce the expected results (not displayed, work in progress in this draft). It is not clear how the data is pre- and post-processed for use with their network.","category":"page"},{"location":"RadCalNet/#All-interfaces","page":"RadCalNet","title":"All interfaces","text":"","category":"section"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"Modules = [ RadCalNet ]","category":"page"},{"location":"RadCalNet/#RadCalNet.ModelData","page":"RadCalNet","title":"RadCalNet.ModelData","text":"ModelData(fpath::String; f_train::Float64 = 0.7)\n\nLoad HDF5 database stored under fpath and performs standardized workflow of data preparation for model training. The data is split under training and testing datasets with a fraction of training data of f_train.\n\nscaler::StatsBase.ZScoreTransform{Float32, Vector{Float32}}: Scaler used for data transformation.\nX_train::Matrix{Float32}: Matrix of training input data.\nY_train::Matrix{Float32}: Matrix of training output data.\nX_tests::Matrix{Float32}: Matrix of testing input data.\nY_tests::Matrix{Float32}: Matrix of testing output data.\nn_inputs::Int64: Number of model inputs.\nn_outputs::Int64: Number of model outputs.\n\n\n\n\n\n","category":"type"},{"location":"RadCalNet/#RadCalNet.ModelTrainer","page":"RadCalNet","title":"RadCalNet.ModelTrainer","text":"ModelTrainer(\n    data::ModelData,\n    model::Chain;\n    batch::Int64=64,\n    epochs::Int64=100,\n    η::Float64=0.001,\n    β::Tuple{Float64,Float64}=(0.9, 0.999),\n    ϵ::Float64=1.0e-08\n)\n\nHolds standardized model training parameters and data.\n\nbatch::Int64: Batch size in training loop.\nepochs::Int64: Number of epochs to train each time.\ndata::RadCalNet.ModelData: Database structure used for training/testing.\nmodel::Flux.Chain: Multi-layer perceptron used for modeling.\noptim::NamedTuple: Internal Adam optimizer.\nlosses::Vector{Float32}: History of losses.\n\n\n\n\n\n","category":"type"},{"location":"RadCalNet/#RadCalNet.createcustomdatabase-Tuple{}","page":"RadCalNet","title":"RadCalNet.createcustomdatabase","text":"createcustomdatabase(;\n    sampler!::Function,\n    repeats::Int64 = 100,\n    samplesize::Int64 = 50_000,\n    cleanup::Bool = false,\n    saveas::String = \"database.h5\",\n    OMMIN::Float64 = 50.0,\n    OMMAX::Float64 = 10000.0,\n    override::Bool = false\n)\n\nCreates a custom database by generating a number repeats of samples of samplesize rows. Inputs for runradcalinput are to be generated by a sampler! user-defined function which modifies in place an array of compositions, and returns T, L, P, FV, TWALL for setting up a simulation. Files are temporarilly stored under data/ with a sequential numbered naming during database creation and aggregated in a HDF5 file named after saveas. The choice to aggregate files after an initial dump is because generation can be interrupted and manually recovered in an easier way and avoiding any risk of data losses - database creation can take a very long time. If cleanup is true, all intermediate files are removed.\n\n\n\n\n\n","category":"method"},{"location":"RadCalNet/#RadCalNet.datasampler!-Tuple{Vector{Float64}}","page":"RadCalNet","title":"RadCalNet.datasampler!","text":"datasampler!(X::Vector{Float64})::Tuple\n\nCustom sample space to generate entries with createcustomdatabase. This function contains the parameter space used for model training.\n\n\n\n\n\n","category":"method"},{"location":"RadCalNet/#RadCalNet.defaultmodel-Tuple{}","page":"RadCalNet","title":"RadCalNet.defaultmodel","text":"defaultmodel()\n\nBuild model structure with which RadCalNet is trained.\n\n\n\n\n\n","category":"method"},{"location":"RadCalNet/#RadCalNet.dumpscaler-Tuple{StatsBase.ZScoreTransform{Float32, Vector{Float32}}, String}","page":"RadCalNet","title":"RadCalNet.dumpscaler","text":"dumpscaler(scaler::ZScoreTransform{Float32,V32}, saveas::String)\n\nWrite z-score scaler mean and scale to provided saveas YAML file.\n\n\n\n\n\n","category":"method"},{"location":"RadCalNet/#RadCalNet.getradcalnet-Tuple{}","page":"RadCalNet","title":"RadCalNet.getradcalnet","text":"getradcalnet(;\n    scale = true,\n    fscaler = nothing,\n    fmstate = nothing\n)\n\nLoad trained model and scaler to compose RadCalNet. If testing new models, it might be useful to use fscaler and fmstate to point to specific versions of scaler and model state files.\n\n\n\n\n\n","category":"method"},{"location":"RadCalNet/#RadCalNet.loaddatabase-Tuple{String}","page":"RadCalNet","title":"RadCalNet.loaddatabase","text":"loaddatabase(fname::String)\n\nRetrieve database from HDF5 file and access table as a matrix.\n\n\n\n\n\n","category":"method"},{"location":"RadCalNet/#RadCalNet.loadscaler-Tuple{String}","page":"RadCalNet","title":"RadCalNet.loadscaler","text":"loadscaler(fname::String)::Function\n\nLoad z-scaler in functional format from YAML fname file.\n\n\n\n\n\n","category":"method"},{"location":"RadCalNet/#RadCalNet.makemodel-Tuple{Vector{Tuple{Int64, Any}}}","page":"RadCalNet","title":"RadCalNet.makemodel","text":"makemodel(layers::Vector{Tuple{Int64, Any}}; bn = false)::Chain\n\nCreate a multi-layer perceptron for learning radiative properties with the provided layers. If bn is true, then batch normalization after each layer. The final layer has by default a sigmoid function to ensure physical outputs in range [0, 1].\n\n\n\n\n\n","category":"method"},{"location":"RadCalNet/#RadCalNet.model","page":"RadCalNet","title":"RadCalNet.model","text":"model(x::Vector{Float32})::Vector{Float32}\n\nMain model interface for emissivity and transmissivity.\n\n\n\n\n\n","category":"function"},{"location":"RadCalNet/#RadCalNet.plottests-Tuple{RadCalNet.ModelTrainer}","page":"RadCalNet","title":"RadCalNet.plottests","text":"plottests(trainer::ModelTrainer; num::Int64)\n\nEvaluate model over num data points and compare the data to the expected values as computed from RadCal. Makes use of test data only - never seem by the model during training.\n\n\n\n\n\n","category":"method"},{"location":"RadCalNet/#RadCalNet.runradcalinput-Tuple{}","page":"RadCalNet","title":"RadCalNet.runradcalinput","text":"runradcalinput(;\n    X::Dict{String, Float64} = Dict{String, Float64}(),\n    T::Float64 = 300.0,\n    L::Float64 = 1.0,\n    P::Float64 = 1.0,\n    FV::Float64 = 0.0,\n    OMMIN::Float64 = 50.0,\n    OMMAX::Float64 = 10000.0,\n    TWALL::Float64 = 500.0,\n    radcalexe::String = \"radcal_win_64.exe\"\n)::Vector{Float64}\n\nCreate RADCAL.IN from template file and dump to disk.\n\nNOTE: the user is responsible to provide a vector X of mole fractions of species that sums up to one. If this is not respected RADCAL fails. The Following list provides the indexes of available species in vector X.\n\nIndex Species Index Species Index Species\n1 CO2 6 C2H6 11 CH3OH\n2 H2O 7 C3H6 12 MMA\n3 CO 8 C3H8 13 O2\n4 CH4 9 C7H8 14 N2\n5 C2H4 10 C7H16  \n\n\n\n\n\n","category":"method"},{"location":"RadCalNet/#RadCalNet.samplecols-Tuple{Int64, Int64}","page":"RadCalNet","title":"RadCalNet.samplecols","text":"Get sample of indexes for data retrieval.  \n\n\n\n\n\n","category":"method"},{"location":"RadCalNet/#RadCalNet.tests-Tuple{RadCalNet.ModelData, Int64}","page":"RadCalNet","title":"RadCalNet.tests","text":"Get testing data for data loader construction. \n\n\n\n\n\n","category":"method"},{"location":"RadCalNet/#RadCalNet.train-Tuple{RadCalNet.ModelData, Int64}","page":"RadCalNet","title":"RadCalNet.train","text":"Get training data for data loader construction. \n\n\n\n\n\n","category":"method"},{"location":"RadCalNet/#RadCalNet.trainonce!-Tuple{RadCalNet.ModelTrainer}","page":"RadCalNet","title":"RadCalNet.trainonce!","text":"trainonce!(trainer::ModelTrainer; num = 1_000)\n\nTrain model and keep track of loss for the number of epochs in trainer using its internal data and parameters. Use num data points.\n\n\n\n\n\n","category":"method"},{"location":"OpenFOAM/#OpenFOAM","page":"OpenFOAM","title":"OpenFOAM","text":"","category":"section"},{"location":"OpenFOAM/","page":"OpenFOAM","title":"OpenFOAM","text":"CurrentModule = OpenFOAM","category":"page"},{"location":"OpenFOAM/","page":"OpenFOAM","title":"OpenFOAM","text":"Modules = [ OpenFOAM ]","category":"page"},{"location":"OpenFOAM/#OpenFOAM.OPENFOAMBANNER","page":"OpenFOAM","title":"OpenFOAM.OPENFOAMBANNER","text":"Banner for all OpenFOAM files with right version.\n\n\n\n\n\n","category":"constant"},{"location":"OpenFOAM/#OpenFOAM.AbstractFlowRateProfile","page":"OpenFOAM","title":"OpenFOAM.AbstractFlowRateProfile","text":"Abstract type for flow rate profile distributions.\n\n\n\n\n\n","category":"type"},{"location":"OpenFOAM/#OpenFOAM.AbstractInjectionModel","page":"OpenFOAM","title":"OpenFOAM.AbstractInjectionModel","text":"Abstract type for injection models.\n\n\n\n\n\n","category":"type"},{"location":"OpenFOAM/#OpenFOAM.AbstractSizeDistribution","page":"OpenFOAM","title":"OpenFOAM.AbstractSizeDistribution","text":"Abstract type for particle size distributions.\n\n\n\n\n\n","category":"type"},{"location":"OpenFOAM/#OpenFOAM.ConstantFlowRateProfile","page":"OpenFOAM","title":"OpenFOAM.ConstantFlowRateProfile","text":"Constant flow rate profile.\n\n\n\n\n\n","category":"type"},{"location":"OpenFOAM/#OpenFOAM.InjectionModel","page":"OpenFOAM","title":"OpenFOAM.InjectionModel","text":"Represents a generic particle injection model.\n\nConstraints imposed by OpenFOAM:\n\nnParticle makes massFlowRate and massTotal to be ignored.\nmassTotal cannot be used in steady state simulations.\nif flowRateProfile is not found a constant massFlowRate profile is computed from the ratio of massTotal and duration.\n\nTo-do:\n\nCheck if parcelBasisType from is applicable to derived types.\n\nmassFlowRate::Number: Particles mass flow rate if nParticle is not provided.\nmassTotal::Number: Total mass to be injected if nParticle is not provided.\nSOI::Number: Start of injection in seconds (base).\nduration::Number: Duration of injection in seconds (base).\nnParticle::Number: Number of particles per parcel.\nuniformParcelSize::UniformParcelSize: Quantity that is constant in parcels (base).\nflowRateProfile::OpenFOAM.AbstractFlowRateProfile: Type of flow rate profile to apply.\n\n\n\n\n\n","category":"type"},{"location":"OpenFOAM/#OpenFOAM.PatchInjection","page":"OpenFOAM","title":"OpenFOAM.PatchInjection","text":"Represents a patch injection model.\n\nname::String: Name to use in injection models list.\npatchName::String: Patch where injection is applied.\ninjectionModel::InjectionModel: Object pointing to general injection model.\nU0::Velocity: Particles injection velocity vector.\nparcelsPerSecond::Number: Number of parcels injected per second.\nsizeDistribution::OpenFOAM.AbstractSizeDistribution: Particle size distribution.\n\n\n\n\n\n","category":"type"},{"location":"OpenFOAM/#OpenFOAM.TableFlowRateProfile","page":"OpenFOAM","title":"OpenFOAM.TableFlowRateProfile","text":"Table flow rate profile.\n\n\n\n\n\n","category":"type"},{"location":"OpenFOAM/#OpenFOAM.TabulatedDensity","page":"OpenFOAM","title":"OpenFOAM.TabulatedDensity","text":"Tabulated density size distribution.\n\n\n\n\n\n","category":"type"},{"location":"OpenFOAM/#OpenFOAM.UniformParcelSize","page":"OpenFOAM","title":"OpenFOAM.UniformParcelSize","text":"Types of uniform parcel sizes.\n\n\n\n\n\n","category":"type"},{"location":"OpenFOAM/#OpenFOAM.Velocity","page":"OpenFOAM","title":"OpenFOAM.Velocity","text":"Simple wraper velocity vector.\n\n\n\n\n\n","category":"type"},{"location":"OpenFOAM/#OpenFOAM.asint-Tuple{Any}","page":"OpenFOAM","title":"OpenFOAM.asint","text":"Round and convert number to an integer.\n\n\n\n\n\n","category":"method"},{"location":"OpenFOAM/#OpenFOAM.parcels_per_second-Tuple{}","page":"OpenFOAM","title":"OpenFOAM.parcels_per_second","text":"parcelstoinject2d(;\n    mdot::Float64,\n    rhop::Float64,\n    diam::Float64,\n    nParticle::Int64 = 1\n)\n\nComputes the flow rate of parcels for a given mean particle size and number of particles per parcels. This is inteded as a helper to create a patchInjection element in the injectionModels of cloudProperties file.\n\n\n\n\n\n","category":"method"},{"location":"OpenFOAM/#OpenFOAM.spheremass-Tuple{Any, Any}","page":"OpenFOAM","title":"OpenFOAM.spheremass","text":"The mass of a sphere of density rho and diameter diam.\n\n\n\n\n\n","category":"method"},{"location":"OpenFOAM/#OpenFOAM.spherevolume-Tuple{Any}","page":"OpenFOAM","title":"OpenFOAM.spherevolume","text":"The volume of a sphere of diameter diam.\n\n\n\n\n\n","category":"method"},{"location":"OpenFOAM/#OpenFOAM.tabulate-Tuple{Any, Any}","page":"OpenFOAM","title":"OpenFOAM.tabulate","text":"Compose table entries in typical OpenFOAM format.\n\n\n\n\n\n","category":"method"},{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"W. L. Grosshandler. Radcal – a narrow-band model for radiation calculations in a combustion environment (National Institute of Standards and Technology, 1993).\n\n\n\nJ. P. Gorog, J. K. Brimacombe and T. N. Adams. Radiative heat transfer in rotary kilns. Metallurgical Transactions B 12, 55–70 (1981).\n\n\n\nW. C. Tam and W. W. Yuen. OpenSC: an open-source calculation tool for combustion mixture emissivity/absorptivity (National Institute of Standards and Technology, 2019).\n\n\n\n","category":"page"},{"location":"DryFlowsheet/#DryFlowsheet","page":"DryFlowsheet","title":"DryFlowsheet","text":"","category":"section"},{"location":"DryFlowsheet/","page":"DryFlowsheet","title":"DryFlowsheet","text":"CurrentModule = DryFlowsheet","category":"page"},{"location":"DryFlowsheet/","page":"DryFlowsheet","title":"DryFlowsheet","text":"Modules = [ DryFlowsheet ]","category":"page"},{"location":"DryFlowsheet/#DryFlowsheet.CooledCrushingMill","page":"DryFlowsheet","title":"DryFlowsheet.CooledCrushingMill","text":"Represents a crushing device with cooling system.\n\nModels\n\n:TARGET_COOLANT_TEMP evaluates the heat transfer lost to coolant provided a target final stream temperature given by keyword argument temp_out. Product temperature is updated through an EnergyStream built with energy exchange computed through exchanged_heat, so that numerical value can be slightly different from target value.\n:USING_GLOBAL_HTC makes use of a global heat transfer coefficient to evaluate heat flux across the cooling stream.\n\nAttributes\n\nrawmeal: The input meal applied to crushing process.\nproduct: The output material stream at the end of product pipeline.\ncoolant: The output material stream at the end of cooling pipeline.\npower: The power applied to the crushing process [W]\nloss: The heat exchanged in between product and cooling pipelines [W].\nglobalhtc: Global heat transfer coefficient [W/K].\n\n\n\n\n\n","category":"type"},{"location":"DryFlowsheet/#DryFlowsheet.EnergyStream","page":"DryFlowsheet","title":"DryFlowsheet.EnergyStream","text":"Represents an energy stream.\n\nAttributes\n\nḣ: Energy flow provided by stream [W].\n\n\n\n\n\n","category":"type"},{"location":"DryFlowsheet/#DryFlowsheet.MaterialStream","page":"DryFlowsheet","title":"DryFlowsheet.MaterialStream","text":"Represents a material stream.\n\nAttributes\n\nṁ: Material mass flow rate [kg/s].\nT: Stream temperature [K].\nP: Stream pressure [Pa].\nY: Components mass fractions [-].\npipeline: Materials pipeline associated to Y.\n\n\n\n\n\n","category":"type"},{"location":"DryFlowsheet/#DryFlowsheet.SolidsSeparator","page":"DryFlowsheet","title":"DryFlowsheet.SolidsSeparator","text":"Represents a solids separator with efficiency η.\n\nTo-do's\n\nAdd inverse model to automatically tune efficiency η.\n\nAttributes\n\nη: Solids separation efficiency [-].\nsource: The stream to be separated into solids and others.\nsolids: The output solids stream.\nothers: The output remaining stream.\n\n\n\n\n\n","category":"type"},{"location":"DryFlowsheet/#DryFlowsheet.StreamPipeline","page":"DryFlowsheet","title":"DryFlowsheet.StreamPipeline","text":"Array of materials to include in a stream.\n\n\n\n\n\n","category":"type"},{"location":"DryFlowsheet/#DryFlowsheet.TransportPipeline","page":"DryFlowsheet","title":"DryFlowsheet.TransportPipeline","text":"Represents a pipeline with heat transfer.\n\nModels\n\n:TARGET_EXIT_TEMP evaluates the heat transfer lost to environment provided a target final stream temperature given by keyword argument temp_out. Product temperature is updated through an EnergyStream built with energy exchange computed through exchanged_heat, so that numerical value can be slightly different from target value.\n:USING_GLOBAL_HTC makes use of a global heat transfer coefficient to evaluate heat flux across the pipe.\n\nTo-do's\n\nImplement heat transfer losses through a convective heat transfer coefficient (HTC) computed from a suitable Nusselt number, for use of pipeline in simulation mode.\n\nAttributes\n\nproduct: The output material stream at the end of pipeline.\npower: The heat exchanged in pipeline [W].\n\n\n\n\n\n","category":"type"},{"location":"DryFlowsheet/#DryFlowsheet.cooled_crushing-Tuple{}","page":"DryFlowsheet","title":"DryFlowsheet.cooled_crushing","text":"Manage use of CooledCrushingMill with different models.\n\n\n\n\n\n","category":"method"},{"location":"DryFlowsheet/#DryFlowsheet.enthalpyflowrate","page":"DryFlowsheet","title":"DryFlowsheet.enthalpyflowrate","text":"Enthalpy flow rate of given stream [W].\n\n\n\n\n\n","category":"function"},{"location":"DryFlowsheet/#DryFlowsheet.exchanged_heat-Tuple{MaterialStream, Any}","page":"DryFlowsheet","title":"DryFlowsheet.exchanged_heat","text":"Heat exchanged with stream to match outlet temperature.\n\n\n\n\n\n","category":"method"},{"location":"DryFlowsheet/#DryFlowsheet.transport_pipe-NTuple{4, Any}","page":"DryFlowsheet","title":"DryFlowsheet.transport_pipe","text":"Manage use of TransportPipeline with different models.\n\n\n\n\n\n","category":"method"},{"location":"#WallyToolbox","page":"Home","title":"WallyToolbox","text":"","category":"section"},{"location":"helpers/#Helpers","page":"Helpers","title":"Helpers","text":"","category":"section"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"The core packages of WallyToolbox ecosystem provide shared functionalities and types that are used in several other more specialized packages. This allows for standardization of interfaces, employed quantities, and avoid boilerplate code. This page organizes everything to facilitate the understanding of the end-user. Knowing the base helper packages DryConstants and DryUtilities is key for proper usage of WallyToolbox.","category":"page"},{"location":"helpers/#DryConstants","page":"Helpers","title":"DryConstants","text":"","category":"section"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"CurrentModule = DryConstants","category":"page"},{"location":"helpers/#Physical-constants","page":"Helpers","title":"Physical constants","text":"","category":"section"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"DryConstants.GAS_CONSTANT\nDryConstants.STEFAN_BOLTZMANN","category":"page"},{"location":"helpers/#DryConstants.GAS_CONSTANT","page":"Helpers","title":"DryConstants.GAS_CONSTANT","text":"Ideal gas constant [J/(mol.K)].\n\n\n\n\n\n","category":"constant"},{"location":"helpers/#DryConstants.STEFAN_BOLTZMANN","page":"Helpers","title":"DryConstants.STEFAN_BOLTZMANN","text":"Stefan-Boltzmann constant [W/(m².K⁴)].\n\n\n\n\n\n","category":"constant"},{"location":"helpers/#Reference-states","page":"Helpers","title":"Reference states","text":"","category":"section"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"DryConstants.T_REF\nDryConstants.P_REF\nDryConstants.C_REF","category":"page"},{"location":"helpers/#DryConstants.T_REF","page":"Helpers","title":"DryConstants.T_REF","text":"Normal atmospheric temperature [K].\n\n\n\n\n\n","category":"constant"},{"location":"helpers/#DryConstants.P_REF","page":"Helpers","title":"DryConstants.P_REF","text":"Reference atmospheric pressure [Pa].\n\n\n\n\n\n","category":"constant"},{"location":"helpers/#DryConstants.C_REF","page":"Helpers","title":"DryConstants.C_REF","text":"Normal state concentration [mol/m³]. \n\n\n\n\n\n","category":"constant"},{"location":"helpers/#Other-constants","page":"Helpers","title":"Other constants","text":"","category":"section"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"DryConstants.ZERO_CELSIUS\nDryConstants.ONE_ATM\nDryConstants.M_AIR","category":"page"},{"location":"helpers/#DryConstants.ZERO_CELSIUS","page":"Helpers","title":"DryConstants.ZERO_CELSIUS","text":"Zero degrees Celsius in Kelvin [273.15 K].\n\n\n\n\n\n","category":"constant"},{"location":"helpers/#DryConstants.ONE_ATM","page":"Helpers","title":"DryConstants.ONE_ATM","text":"Atmospheric pressure at sea level [101325.0 Pa].\n\n\n\n\n\n","category":"constant"},{"location":"helpers/#DryConstants.M_AIR","page":"Helpers","title":"DryConstants.M_AIR","text":"Air mean molecular mass [kg/mol].\n\n\n\n\n\n","category":"constant"},{"location":"helpers/#DryUtilities","page":"Helpers","title":"DryUtilities","text":"","category":"section"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"CurrentModule = DryUtilities\nDocTestSetup  = quote\n    using DryUtilities\n    using DryUtilities: heaviside, interval, makestepwise1d\n    using DryUtilities: closestpowerofx, axesunitscaler\n    using DryUtilities: maxrelativechange, maxabsolutechange\nend","category":"page"},{"location":"helpers/#Haskell-like-array-slicing","page":"Helpers","title":"Haskell-like array slicing","text":"","category":"section"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"Those who know Haskell probably started learning it by manipulating lists with head and tail. Those functionalities are not available in Julia by default and array slicing - with an ugly syntax - is required. Since this is done often in the fields of application of DryTooling, both head and tail together with a body functions are available in its core. They are simple wrapers over the @view macro and work with both iterable types and arrays. The following snippet illustrates their usage.","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"julia> v = collect(1:4);\n\njulia> head(v) == [1; 2; 3]\ntrue\n\njulia> tail(v) == [2; 3; 4]\ntrue\n\njulia> body(v) == [2; 3]\ntrue","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"More examples are provided in the following documentation ahead of each of the functions.","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"julia> head(1:4)\n1:3\n\njulia> head([1, 2, 3, 4])\n3-element view(::Vector{Int64}, 1:3) with eltype Int64:\n 1\n 2\n 3\n","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"DryUtilities.head","category":"page"},{"location":"helpers/#DryUtilities.head","page":"Helpers","title":"DryUtilities.head","text":"head(z)\n\nAccess view of array head. See also tail and body.\n\n\n\n\n\n","category":"function"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"julia> tail([1, 2, 3, 4])\n3-element view(::Vector{Int64}, 2:4) with eltype Int64:\n 2\n 3\n 4\njulia> tail(1:4)\n2:4","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"DryUtilities.tail","category":"page"},{"location":"helpers/#DryUtilities.tail","page":"Helpers","title":"DryUtilities.tail","text":"tail(z)\n\nAccess view of array tail. See also head and body.\n\n\n\n\n\n","category":"function"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"julia> body([1, 2, 3, 4])\n2-element view(::Vector{Int64}, 2:3) with eltype Int64:\n 2\n 3\njulia> body(1:4)\n2:3","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"DryUtilities.body","category":"page"},{"location":"helpers/#DryUtilities.body","page":"Helpers","title":"DryUtilities.body","text":"body(z)\n\nAccess view of array body. See also  head and tail.\n\n\n\n\n\n","category":"function"},{"location":"helpers/#Handling-of-discontinuous-functions","page":"Helpers","title":"Handling of discontinuous functions","text":"","category":"section"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"Discontinuous functions are all over in real world applications. Whether they handle discrete signals sent to controllers or represent a material property change in the solution domain of a heat transfer simulation, they are often represented by a single or a composition of Heaviside step functions. Again, because its implementation is pretty simple and optimization routines require a differentiable form of this function, DryUtilities implements heaviside and interval as proposed in this StackOverflow answer.","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"julia> heaviside(-1) == 0\ntrue\n\njulia> heaviside(-1.0) == 0.0\ntrue\n\njulia> heaviside(0.0) == 0.5\ntrue\n\njulia> heaviside(1.0) == 1.0\ntrue\n\njulia> interval(10; a = 0, b = 10) == 0.5\ntrue","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"We see below that heaviside also works on ranges","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"julia> heaviside(-2:2)\n5-element Vector{Float64}:\n 0.0\n 0.0\n 0.5\n 1.0\n 1.0","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"DryUtilities.heaviside","category":"page"},{"location":"helpers/#DryUtilities.heaviside","page":"Helpers","title":"DryUtilities.heaviside","text":"heaviside(t)\n\nProvides a Heaviside function compatible with automatic differentiation. This is a requirement for conceiving, e.g., model predictive controls with discontinuous functions under ModelingToolkit.\n\n\n\n\n\n","category":"function"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"By implementation inheritance that is also the case for interval:","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"julia> interval(0:6; a = 2, b = 5)\n7-element Vector{Float64}:\n 0.0\n 0.0\n 0.5\n 1.0\n 1.0\n 0.5\n 0.0","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"DryUtilities.interval","category":"page"},{"location":"helpers/#DryUtilities.interval","page":"Helpers","title":"DryUtilities.interval","text":"interval(x; a=-Inf, b=Inf)\n\nReturns 1 if x  (a b), 1/2 for x = a  x = b, or 0.\n\n\n\n\n\n","category":"function"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"As it is the case for representation of specific heats using NASA7/NASA9 or Shomate polynomials, functions defined by parts with an specific change point are also required in physical modeling. To this end, a stepwise function can be established with makestepwise1d. If keyword differentialble = true, then the function makes use of the above interval and remains compatible with ModelingToolkit, for instance.","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"julia> f = makestepwise1d(x->x, x->x^2, 1.0; differentiable = true);\n\njulia> f(0:0.2:2.0)\n11-element Vector{Float64}:\n 0.0\n 0.2\n 0.4\n 0.6\n 0.8\n 1.0\n 1.44\n 1.9599999999999997\n 2.5600000000000005\n 3.24\n 4.0\n\njulia> using ModelingToolkit\n\njulia> @variables x\n1-element Vector{Num}:\n x\n\njulia> f(x); # Output is too long, try by yourself.","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"DryUtilities.makestepwise1d","category":"page"},{"location":"helpers/#DryUtilities.makestepwise1d","page":"Helpers","title":"DryUtilities.makestepwise1d","text":"makestepwise1d(lo, hi, xc)\n\nCreates an univariate function that is composed of two parts, the first evaluated before a critical domain point xc, and the second above that value. This is often required, for instance, for the evaluation of NASA polynomials for thermodynamic properties. If differentiable, then the returned function is compatible with symbolic argument as required when using package ModelingToolkit, etc.\n\n\n\n\n\n","category":"function"},{"location":"helpers/#Rounding-numbers-and-automatic-axes","page":"Helpers","title":"Rounding numbers and automatic axes","text":"","category":"section"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"danger: Danger\nThis section documents functions that are used in a very unstable context and might evolve in the next commits until an stable interface is established.","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"Simple rounding is not enough. Getting values that are rounded close to a power of a given number and rounded to floor or ceil is often the case. This is standardized in DryTooling through closestpowerofx:","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"julia> closestpowerofx(10)\n10\n\njulia> closestpowerofx(11)\n20\n\njulia> closestpowerofx(11, roundf = floor)\n10\n\njulia> closestpowerofx(11, x = 5, roundf = floor)\n10\n\njulia> closestpowerofx(12.0; x = 10)\n20\n\njulia> closestpowerofx(12.0; x = 10, roundf = floor)\n10\n\njulia> closestpowerofx(12.0; x = 10, roundf = round)\n10","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"DryUtilities.closestpowerofx","category":"page"},{"location":"helpers/#DryUtilities.closestpowerofx","page":"Helpers","title":"DryUtilities.closestpowerofx","text":"closestpowerofx(\n    v::Number;\n    x::Number = 10,\n    roundf::Function = ceil\n)::Int64\n\nCompute the integer power of x closest to v using roundf as rouding method. This might be useful for automatic setting more reasonable limits to plot axis or similar applications. Changing the rouding method through roundf is also possible.\n\n\n\n\n\n","category":"function"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"Below we illustrate the usage of axesunitscaler.","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"NOTE: this function is not yet stable. In the future it will instead return labels using symbols like k, M, G, etc., for the units through a flag provided by the user.","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"julia> axesunitscaler(1)\n(\"\", 1)\n\njulia> axesunitscaler(1000)\n(\"[×1000]\", 1000)\n\njulia> axesunitscaler(1000000)\n(\"[×1000000]\", 1000000)","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"DryUtilities.axesunitscaler","category":"page"},{"location":"helpers/#DryUtilities.axesunitscaler","page":"Helpers","title":"DryUtilities.axesunitscaler","text":"axesunitscaler(x::Number)::Tuple{String, Int64}\n\nFind scaling factor for multiples of 1000 units. Together with closestpowerofx this can be used to produce better automatic plot axes limits. The returned values provide the string for modifying the axis label and the associated scaling factor.\n\n\n\n\n\n","category":"function"},{"location":"helpers/#Computation-of-changes-and-residuals","page":"Helpers","title":"Computation of changes and residuals","text":"","category":"section"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"danger: Danger\nThis section documents functions that are used in a very unstable context and might evolve in the next commits until an stable interface is established.","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"DryUtilities.maxabsolutechange\nDryUtilities.maxrelativechange","category":"page"},{"location":"helpers/#DryUtilities.maxabsolutechange","page":"Helpers","title":"DryUtilities.maxabsolutechange","text":"Maximum absolute change in a solution array.\n\n\n\n\n\n","category":"function"},{"location":"helpers/#DryUtilities.maxrelativechange","page":"Helpers","title":"DryUtilities.maxrelativechange","text":"Maximum relative change in a solution array.\n\n\n\n\n\n","category":"function"},{"location":"helpers/#Unit-conversion","page":"Helpers","title":"Unit conversion","text":"","category":"section"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"DryUtilities.nm3_h_to_kg_h\nDryUtilities.kg_h_to_nm3_h","category":"page"},{"location":"helpers/#DryUtilities.nm3_h_to_kg_h","page":"Helpers","title":"DryUtilities.nm3_h_to_kg_h","text":"Convert [Nm³/h] to [kg/h].\n\n\n\n\n\n","category":"function"},{"location":"helpers/#DryUtilities.kg_h_to_nm3_h","page":"Helpers","title":"DryUtilities.kg_h_to_nm3_h","text":"Convert [kg/h] to [Nm³/h].\n\n\n\n\n\n","category":"function"},{"location":"helpers/#Abstract-types","page":"Helpers","title":"Abstract types","text":"","category":"section"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"CurrentModule = DryAbstract","category":"page"},{"location":"helpers/#Fixed-state-materials","page":"Helpers","title":"Fixed state materials","text":"","category":"section"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"DryAbstract.AbstractMaterial\nDryAbstract.AbstractSolidMaterial\nDryAbstract.AbstractLiquidMaterial\nDryAbstract.AbstractGasMaterial","category":"page"},{"location":"helpers/#DryAbstract.AbstractMaterial","page":"Helpers","title":"DryAbstract.AbstractMaterial","text":"Base type for any material substance.\n\n\n\n\n\n","category":"type"},{"location":"helpers/#DryAbstract.AbstractSolidMaterial","page":"Helpers","title":"DryAbstract.AbstractSolidMaterial","text":"Base type for solid materials.\n\n\n\n\n\n","category":"type"},{"location":"helpers/#DryAbstract.AbstractLiquidMaterial","page":"Helpers","title":"DryAbstract.AbstractLiquidMaterial","text":"Base type for liquid materials.\n\n\n\n\n\n","category":"type"},{"location":"helpers/#DryAbstract.AbstractGasMaterial","page":"Helpers","title":"DryAbstract.AbstractGasMaterial","text":"Base type for gas materials.\n\n\n\n\n\n","category":"type"},{"location":"helpers/#Problem-solving-and-physical-models","page":"Helpers","title":"Problem solving and physical models","text":"","category":"section"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"DryAbstract.AbstractMatrixProblem\nDryAbstract.AbstractIterativeSolver\nDryAbstract.AbstractSolutionStorage\nDryAbstract.AbstractPhysicalModel","category":"page"},{"location":"helpers/#DryAbstract.AbstractMatrixProblem","page":"Helpers","title":"DryAbstract.AbstractMatrixProblem","text":"Base type for linear algebra problems.\n\n\n\n\n\n","category":"type"},{"location":"helpers/#DryAbstract.AbstractIterativeSolver","page":"Helpers","title":"DryAbstract.AbstractIterativeSolver","text":"Base type for (nonlinear) iterative solvers.\n\n\n\n\n\n","category":"type"},{"location":"helpers/#DryAbstract.AbstractSolutionStorage","page":"Helpers","title":"DryAbstract.AbstractSolutionStorage","text":"Base type for storing simulation solution.\n\n\n\n\n\n","category":"type"},{"location":"helpers/#DryAbstract.AbstractPhysicalModel","page":"Helpers","title":"DryAbstract.AbstractPhysicalModel","text":"Base type for physical models.\n\n\n\n\n\n","category":"type"},{"location":"helpers/#Transport,-thermodynamics,-and-kinetics","page":"Helpers","title":"Transport, thermodynamics, and kinetics","text":"","category":"section"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"DryAbstract.AbstractTransportModel\nDryAbstract.AbstractSolidTransport\nDryAbstract.AbstractGasThermo\nDryAbstract.AbstractSolidThermo\nDryAbstract.AbstractMixtureSubstance\nDryAbstract.AbstractMixturePhase\nDryAbstract.AbstractKineticsMechanism","category":"page"},{"location":"helpers/#DryAbstract.AbstractTransportModel","page":"Helpers","title":"DryAbstract.AbstractTransportModel","text":"Base type for transport models.\n\n\n\n\n\n","category":"type"},{"location":"helpers/#DryAbstract.AbstractSolidTransport","page":"Helpers","title":"DryAbstract.AbstractSolidTransport","text":"Base type for transport models.\n\n\n\n\n\n","category":"type"},{"location":"helpers/#DryAbstract.AbstractGasThermo","page":"Helpers","title":"DryAbstract.AbstractGasThermo","text":"Base type for thermodynamic models.\n\n\n\n\n\n","category":"type"},{"location":"helpers/#DryAbstract.AbstractSolidThermo","page":"Helpers","title":"DryAbstract.AbstractSolidThermo","text":"Base type for thermodynamic models.\n\n\n\n\n\n","category":"type"},{"location":"helpers/#DryAbstract.AbstractMixtureSubstance","page":"Helpers","title":"DryAbstract.AbstractMixtureSubstance","text":"Base type for simplified mixture substances.\n\n\n\n\n\n","category":"type"},{"location":"helpers/#DryAbstract.AbstractMixturePhase","page":"Helpers","title":"DryAbstract.AbstractMixturePhase","text":"Base type for simplified mixture phases.\n\n\n\n\n\n","category":"type"},{"location":"helpers/#DryAbstract.AbstractKineticsMechanism","page":"Helpers","title":"DryAbstract.AbstractKineticsMechanism","text":"Base type for coded kinetics mechanisms.\n\n\n\n\n\n","category":"type"},{"location":"helpers/#Finite-volume-method-and-relatives","page":"Helpers","title":"Finite volume method and relatives","text":"","category":"section"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"DryAbstract.AbstractDiffusionModel1D\nDryAbstract.AbstractGrid1D","category":"page"},{"location":"helpers/#DryAbstract.AbstractDiffusionModel1D","page":"Helpers","title":"DryAbstract.AbstractDiffusionModel1D","text":"Base type for diffusion (heat, species, ...) models.\n\n\n\n\n\n","category":"type"},{"location":"helpers/#DryAbstract.AbstractGrid1D","page":"Helpers","title":"DryAbstract.AbstractGrid1D","text":"Base type of one-dimensional grids.\n\n\n\n\n\n","category":"type"},{"location":"DryMaterials/#DryMaterials","page":"DryMaterials","title":"DryMaterials","text":"","category":"section"},{"location":"DryMaterials/","page":"DryMaterials","title":"DryMaterials","text":"CurrentModule = DryMaterials","category":"page"},{"location":"DryMaterials/","page":"DryMaterials","title":"DryMaterials","text":"Modules = [ DryMaterials ]","category":"page"},{"location":"DryMaterials/#DryMaterials.H_AIR","page":"DryMaterials","title":"DryMaterials.H_AIR","text":"Coefficients for air enthalpy polynomial [J/kg].\n\n\n\n\n\n","category":"constant"},{"location":"DryMaterials/#DryMaterials.PureAir","page":"DryMaterials","title":"DryMaterials.PureAir","text":"Simple implementation of pure air for illustration purposes.\n\n\n\n\n\n","category":"type"},{"location":"DryMaterials/#DryMaterials.PureMineral","page":"DryMaterials","title":"DryMaterials.PureMineral","text":"Simple solid mineral material for illustration purposes.\n\n\n\n\n\n","category":"type"},{"location":"DryMaterials/#DryMaterials.PureWater","page":"DryMaterials","title":"DryMaterials.PureWater","text":"Simple implementation of liquid water for illustration purposes.\n\n\n\n\n\n","category":"type"},{"location":"DryMaterials/#DryMaterials.density","page":"DryMaterials","title":"DryMaterials.density","text":"Evaluates the density of material [kg/m³].\n\n\n\n\n\n","category":"function"},{"location":"DryMaterials/#DryMaterials.enthalpy","page":"DryMaterials","title":"DryMaterials.enthalpy","text":"Evaluates the enthalpy of material [J/kg].\n\n\n\n\n\n","category":"function"}]
}
