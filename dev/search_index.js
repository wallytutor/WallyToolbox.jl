var documenterSearchIndex = {"docs":
[{"location":"RadCalNet/#RadCalNet","page":"RadCalNet","title":"RadCalNet","text":"","category":"section"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"Radiation properties machine learning model trained on RadCal.","category":"page"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"In this project we use the re-implementation of RadCal [3] to generate data and train a machine learning model for the prediction of radiative properties, i.e. emissivity and transmissivity, of common combustion flue gases.","category":"page"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"This is done because for real-time calls of RADCAL might be computationally prohibitive, for instance in CFD applications. Thus, a neural network is trained with Flux based on the simulated data and this module provides an interface to call the network from external programs (Ansys Fluent, OpenFOAM, ...).","category":"page"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"For details of validity ranges and sample space, please check function RadCalNet.datasampler!, where random sampling is provided. Indexing of species array is documented at RadCalNet.runradcalinput.","category":"page"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"Below we display the quality of fitting of model. One must notice that fitting of emissivity still needs a few adjustments, while transmissivity is well predicted over the whole range.","category":"page"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"(Image: Model testing)","category":"page"},{"location":"RadCalNet/#Usage","page":"RadCalNet","title":"Usage","text":"","category":"section"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"CurrentModule = RadCalNet","category":"page"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"The following snippet illustrates everything the model was designed to do.","category":"page"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"julia> using RadCalNet;\n\njulia> x = Float32[1200.0; 1000.0; 2.0; 1.0; 0.1; 0.2; 0.1];\n\njulia> y = RadCalNet.model(x)\n2-element Vector{Float32}:\n 0.3231391\n 0.6287435","category":"page"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"The array of inputs x is defined below, and y provides gas emissitivy and transmissivity, respectively. Notice that x must be a column vector with entries of type Float32.","category":"page"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"Index Quantity Units Minimum Maximum\n1 Wall temperature K 300 2500\n2 Gas temperature K 300 2500\n3 Depth m 0.1 3.0\n4 Pressure atm 0.5 1.5\n5 CO2 mole fraction - 0.0 0.25\n6 H2O mole fraction - 0.0 0.30\n7 CO  mole fraction - 0.0 0.20","category":"page"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"For practical applications, one generally is interested in calling the model with a large inputs set. Belowe we illustrate how to do this with a block of data and verify the predictions are within the model tolerance on average.","category":"page"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"using WallyToolbox\nusing RadCalNet\nusing Flux: mae\n\n# Loss after last training.\nLOSS = 0.0022\n\n# Random sample data randomly extracted (20 rows).\nTESTDATA = Float32[\n    1670.0   960.0  1.9  0.5  0.15  0.18  0.03   0.161774   0.820025\n    1230.0   320.0  1.9  1.0  0.04  0.08  0.18   0.20205    0.79694\n    1760.0   770.0  2.1  1.5  0.22  0.24  0.12   0.309017   0.669564\n    1770.0   960.0  1.9  0.5  0.15  0.0   0.13   0.0721235  0.919333\n     350.0  1590.0  1.9  1.0  0.06  0.29  0.12   0.357215   0.169437\n    2330.0  1820.0  1.1  1.5  0.13  0.08  0.13   0.100282   0.840802\n    1220.0  2070.0  0.2  0.5  0.11  0.17  0.09   0.0361672  0.902581\n     760.0  1380.0  1.9  1.5  0.1   0.01  0.10   0.188531   0.69798\n    1870.0  1880.0  0.2  1.5  0.14  0.28  0.17   0.0819803  0.858508\n    1910.0  2220.0  1.3  1.5  0.2   0.3   0.09   0.202592   0.63856\n    2290.0   360.0  1.8  0.5  0.0   0.23  0.07   0.0755366  0.914045\n    1330.0   640.0  1.7  1.5  0.21  0.04  0.06   0.227428   0.764363\n    1090.0  1260.0  1.9  1.5  0.17  0.18  0.18   0.381407   0.501751\n    1250.0  1590.0  0.4  1.5  0.13  0.27  0.18   0.191725   0.688272\n     990.0  2320.0  0.5  1.0  0.23  0.27  0.03   0.118285   0.633932\n    1920.0   720.0  0.3  1.0  0.05  0.03  0.18   0.0496579  0.945693\n    1250.0   310.0  0.6  1.0  0.04  0.18  0.15   0.171857   0.827273\n    1990.0  1020.0  1.3  1.0  0.09  0.11  0.15   0.140596   0.837042\n    1180.0  1830.0  0.3  0.5  0.09  0.29  0.02   0.0682171  0.851304\n    2120.0  1230.0  2.9  1.5  0.03  0.06  0.17   0.168034   0.791942\n]\n\n# Predictors and targets transposed.\nX = transpose(TESTDATA[:, 1:7])\nY = transpose(TESTDATA[:, 8:9])\n\nmae(RadCalNet.model(X), Y) <= LOSS\n\n# output\n\ntrue","category":"page"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"The following test can also be seen as a tutorial for data generation, where we make the verification of data generation with provided seed.  See RadCalNet.createcustomdatabase for more details. An alternative RadCalNet.datasampler! can be provided for specific problems.","category":"page"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"import Random\nusing WallyToolbox\nusing RadCalNet\n\nfunction sampledatabase()\n    #XXX: documentation is run from root directory!\n    testname = joinpath(joinpath(@__DIR__, \"src/RadCalNet/data/sample.dat\"))\n\n    # Provide a seed at start-up for *maybe* reproducible builds.\n    Random.seed!(42)\n\n    if !isfile(testname)\n        RadCalNet.createcustomdatabase(;\n            sampler!   = RadCalNet.datasampler!,\n            repeats    = 3,\n            samplesize = 3,\n            cleanup    = true,\n            saveas     = testname,\n            override   = true\n        )\n    end\n\n    return RadCalNet.loaddatabase(testname)\nend\n\nA = sampledatabase()[:, end-5:end]\n\n# output\n\n9×6 Matrix{Float32}:\n 0.61  0.0006522    0.00680899  0.127997       1.4369f5   0.784483\n 0.63  0.00147905   0.0163017   0.256072   52761.9        0.493376\n 0.8   0.00181013   0.0525569   0.209679    1712.82       0.743175\n 0.69  0.000962085  0.0317917   0.0917254      3.80101f5  0.88582\n 0.69  0.00246231   0.0538234   0.418247    1442.63       0.479691\n 0.68  0.00210072   0.00470752  0.0997078  71325.7        0.79875\n 0.67  0.000770321  0.0101432   0.0812446      3.0696f5   0.815462\n 0.7   0.00154008   0.0215186   0.253691   24945.7        0.478712\n 0.53  0.00133843   0.0180676   0.234852   21784.6        0.7443","category":"page"},{"location":"RadCalNet/#To-do's","page":"RadCalNet","title":"To-do's","text":"","category":"section"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"Broaden sample space over the whole RadCal composition spectrum.\nDefine data loading on GPU/CPU though a flag when recovering model.\nCreate database for testing outside of sampling points.\nImprove model reload and organize a notebook for training.","category":"page"},{"location":"RadCalNet/#Literature-discussion","page":"RadCalNet","title":"Literature discussion","text":"","category":"section"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"using DelimitedFiles\nusing HDF5\nusing Plots\nusing Printf\n\nusing WallyToolbox\nimport RadCalNet\n\nfunction gorogcomposition()\n    X = zeros(14)\n    X[1] = 0.2\n    X[2] = 0.2\n    X[end] = 1.0 - sum(X[1:2])\n    return X\nend\n\nfunction gorogsemissivitydata()\n    pr = collect(0.0:0.015:3.2)\n    Tg = [830.0, 1110.0, 1390.0]\n\n    X = gorogcomposition()\n    prod = Iterators.product(pr, Tg)\n    samplesize = length(pr) * length(Tg)\n    table = zeros(samplesize, 26)\n\n    for (k, (p, T)) in enumerate(prod)\n        table[k, 1:end] = RadCalNet.runradcalinput(;\n            X = X,\n            T = T,\n            L = p / sum(X[1:2]),\n            TWALL = 300.0,\n            FV = 1.0e-15\n        )\n    end\n\n    return table\nend\n\nfunction gorogsabsorptivitydata()\n    pr = collect(0.0:0.01:1.6)\n    Tw = [277.0, 555.0, 833.0]\n\n    X = gorogcomposition()\n    prod = Iterators.product(pr, Tw)\n    samplesize = length(pr) * length(Tw)\n    table = zeros(samplesize, 26)\n\n    for (k, (p, T)) in enumerate(prod)\n        table[k, 1:end] = RadCalNet.runradcalinput(;\n            X = X,\n            T = 1110.0,\n            L = p / sum(X[1:2]),\n            TWALL = T,\n            FV = 1.0e-15\n        )\n    end\n\n    return table\nend\n\nfunction plotgorogsemissitivity(εdata, εgorog)\n    p = plot(dpi = 100, legend = :topleft)\n    scatter!(p, εdata[1][:, 1], εdata[1][:, 2],\n             markerstrokewidth = 0.0, label = \"Gorog\")\n\n    for T in unique(εgorog[:, 4])\n        sel = εgorog[εgorog[:, 4] .== T, :]\n        pr = sum(sel[:, 8:9], dims = 2) .* sel[:, 5]\n        εg = sel[:, 24]\n        plot!(p, pr, εg, label = @sprintf(\"%4.0f K\", T))\n    end\n\n    xlims!(p, 0.0, 3.2)\n    ylims!(p, 0.0, 0.7)\n    xticks!(p, 0.0:0.4:3.2)\n    yticks!(p, 0.0:0.1:0.7)\n\n    xlabel!(p, \"Optical thickness [m-atm]\")\n    ylabel!(p, \"Emissivity\")\n\n    p\nend\n\nfunction plotgorogsabsorptivitydata(αdata, αgorog)\n    p = plot(dpi = 100, legend = :topleft)\n    scatter!(p, αdata[1][:, 1], αdata[1][:, 2],\n             markerstrokewidth = 0.0, label = \"Gorog\")\n\n    for T in unique(αgorog[:, 3])\n        sel = αgorog[αgorog[:, 3] .== T, :]\n        pr = sum(sel[:, 8:9], dims = 2) .* sel[:, 5]\n        αg = 1.0 .- sel[:, end]\n        plot!(p, pr, αg, label = @sprintf(\"%4.0f K\", T))\n    end\n\n    xlims!(p, 0.0, 1.6)\n    ylims!(p, 0.0, 1.0)\n    xticks!(p, 0.0:0.2:1.6)\n    yticks!(p, 0.0:0.2:1.0)\n\n    xlabel!(p, \"Optical thickness [m-atm]\")\n    ylabel!(p, \"Absorptivity\")\n\n    p\nend\n\ndatadir = @__DIR__\n\nεfig = joinpath(datadir, \"media/emissivity.png\")\nαfig = joinpath(datadir, \"media/absorptivity.png\")\n\nεfile = joinpath(datadir, \"data/emissivity.csv\")\nαfile = joinpath(datadir, \"data/absorptivity.csv\")\n\nif !isfile(εfig)\n    εdata = readdlm(εfile, ',', Float64, header = true)\n    εgorog = gorogsemissivitydata()\n    p = plotgorogsemissitivity(εdata, εgorog)\n    png(p, εfig)\nend\n\nif !isfile(αfig)\n    αdata = readdlm(αfile, ',', Float64, header = true)\n    αgorog = gorogsabsorptivitydata()\n    p = plotgorogsabsorptivitydata(αdata, αgorog)\n    png(p, αfig)\nend","category":"page"},{"location":"RadCalNet/#Verification-agains-Gorog's-paper","page":"RadCalNet","title":"Verification agains Gorog's paper","text":"","category":"section"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"Below we compare computed values with those by Gorog et al. [4]. Reference paper is found here.","category":"page"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"(Image: Emissivity)","category":"page"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"(Image: Absorptivity)","category":"page"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"At least qualitative agreement is found and orders of magnitude are right. On the other hand, using directly the model parameters from Tam [5] do not produce the expected results (not displayed, work in progress in this draft). It is not clear how the data is pre- and post-processed for use with their network.","category":"page"},{"location":"RadCalNet/#All-interfaces","page":"RadCalNet","title":"All interfaces","text":"","category":"section"},{"location":"RadCalNet/","page":"RadCalNet","title":"RadCalNet","text":"Modules = [ RadCalNet ]","category":"page"},{"location":"RadCalNet/#RadCalNet.ModelData","page":"RadCalNet","title":"RadCalNet.ModelData","text":"ModelData(fpath::String; f_train::Float64 = 0.7)\n\nLoad HDF5 database stored under fpath and performs standardized workflow of data preparation for model training. The data is split under training and testing datasets with a fraction of training data of f_train.\n\nscaler::StatsBase.ZScoreTransform{Float32, Vector{Float32}}: Scaler used for data transformation.\nX_train::Matrix{Float32}: Matrix of training input data.\nY_train::Matrix{Float32}: Matrix of training output data.\nX_tests::Matrix{Float32}: Matrix of testing input data.\nY_tests::Matrix{Float32}: Matrix of testing output data.\nn_inputs::Int64: Number of model inputs.\nn_outputs::Int64: Number of model outputs.\n\n\n\n\n\n","category":"type"},{"location":"RadCalNet/#RadCalNet.ModelTrainer","page":"RadCalNet","title":"RadCalNet.ModelTrainer","text":"ModelTrainer(\n    data::ModelData,\n    model::Chain;\n    batch::Int64=64,\n    epochs::Int64=100,\n    η::Float64=0.001,\n    β::Tuple{Float64,Float64}=(0.9, 0.999),\n    ϵ::Float64=1.0e-08\n)\n\nHolds standardized model training parameters and data.\n\nbatch::Int64: Batch size in training loop.\nepochs::Int64: Number of epochs to train each time.\ndata::RadCalNet.ModelData: Database structure used for training/testing.\nmodel::Flux.Chain: Multi-layer perceptron used for modeling.\noptim::NamedTuple: Internal Adam optimizer.\nlosses::Vector{Float32}: History of losses.\n\n\n\n\n\n","category":"type"},{"location":"RadCalNet/#RadCalNet.createcustomdatabase-Tuple{}","page":"RadCalNet","title":"RadCalNet.createcustomdatabase","text":"createcustomdatabase(;\n    sampler!::Function,\n    repeats::Int64 = 100,\n    samplesize::Int64 = 50_000,\n    cleanup::Bool = false,\n    saveas::String = \"database.h5\",\n    OMMIN::Float64 = 50.0,\n    OMMAX::Float64 = 10000.0,\n    override::Bool = false\n)\n\nCreates a custom database by generating a number repeats of samples of samplesize rows. Inputs for runradcalinput are to be generated by a sampler! user-defined function which modifies in place an array of compositions, and returns T, L, P, FV, TWALL for setting up a simulation. Files are temporarilly stored under data/ with a sequential numbered naming during database creation and aggregated in a HDF5 file named after saveas. The choice to aggregate files after an initial dump is because generation can be interrupted and manually recovered in an easier way and avoiding any risk of data losses - database creation can take a very long time. If cleanup is true, all intermediate files are removed.\n\n\n\n\n\n","category":"method"},{"location":"RadCalNet/#RadCalNet.datasampler!-Tuple{Vector{Float64}}","page":"RadCalNet","title":"RadCalNet.datasampler!","text":"datasampler!(X::Vector{Float64})::Tuple\n\nCustom sample space to generate entries with createcustomdatabase. This function contains the parameter space used for model training.\n\n\n\n\n\n","category":"method"},{"location":"RadCalNet/#RadCalNet.defaultmodel-Tuple{}","page":"RadCalNet","title":"RadCalNet.defaultmodel","text":"defaultmodel()\n\nBuild model structure with which RadCalNet is trained.\n\n\n\n\n\n","category":"method"},{"location":"RadCalNet/#RadCalNet.dumpscaler-Tuple{StatsBase.ZScoreTransform{Float32, Vector{Float32}}, String}","page":"RadCalNet","title":"RadCalNet.dumpscaler","text":"dumpscaler(scaler::ZScoreTransform{Float32,V32}, saveas::String)\n\nWrite z-score scaler mean and scale to provided saveas YAML file.\n\n\n\n\n\n","category":"method"},{"location":"RadCalNet/#RadCalNet.getradcalnet-Tuple{}","page":"RadCalNet","title":"RadCalNet.getradcalnet","text":"getradcalnet(;\n    scale = true,\n    fscaler = nothing,\n    fmstate = nothing\n)\n\nLoad trained model and scaler to compose RadCalNet. If testing new models, it might be useful to use fscaler and fmstate to point to specific versions of scaler and model state files.\n\n\n\n\n\n","category":"method"},{"location":"RadCalNet/#RadCalNet.loaddatabase-Tuple{String}","page":"RadCalNet","title":"RadCalNet.loaddatabase","text":"loaddatabase(fname::String)\n\nRetrieve database from HDF5 file and access table as a matrix.\n\n\n\n\n\n","category":"method"},{"location":"RadCalNet/#RadCalNet.loadscaler-Tuple{String}","page":"RadCalNet","title":"RadCalNet.loadscaler","text":"loadscaler(fname::String)::Function\n\nLoad z-scaler in functional format from YAML fname file.\n\n\n\n\n\n","category":"method"},{"location":"RadCalNet/#RadCalNet.makemodel-Tuple{Vector{Tuple{Int64, Any}}}","page":"RadCalNet","title":"RadCalNet.makemodel","text":"makemodel(layers::Vector{Tuple{Int64, Any}}; bn = false)::Chain\n\nCreate a multi-layer perceptron for learning radiative properties with the provided layers. If bn is true, then batch normalization after each layer. The final layer has by default a sigmoid function to ensure physical outputs in range [0, 1].\n\n\n\n\n\n","category":"method"},{"location":"RadCalNet/#RadCalNet.model","page":"RadCalNet","title":"RadCalNet.model","text":"model(x::Vector{Float32})::Vector{Float32}\n\nMain model interface for emissivity and transmissivity.\n\n\n\n\n\n","category":"function"},{"location":"RadCalNet/#RadCalNet.plottests-Tuple{RadCalNet.ModelTrainer}","page":"RadCalNet","title":"RadCalNet.plottests","text":"plottests(trainer::ModelTrainer; num::Int64)\n\nEvaluate model over num data points and compare the data to the expected values as computed from RadCal. Makes use of test data only - never seem by the model during training.\n\n\n\n\n\n","category":"method"},{"location":"RadCalNet/#RadCalNet.runradcalinput-Tuple{}","page":"RadCalNet","title":"RadCalNet.runradcalinput","text":"runradcalinput(;\n    X::Dict{String, Float64} = Dict{String, Float64}(),\n    T::Float64 = 300.0,\n    L::Float64 = 1.0,\n    P::Float64 = 1.0,\n    FV::Float64 = 0.0,\n    OMMIN::Float64 = 50.0,\n    OMMAX::Float64 = 10000.0,\n    TWALL::Float64 = 500.0,\n    radcalexe::String = \"radcal_win_64.exe\"\n)::Vector{Float64}\n\nCreate RADCAL.IN from template file and dump to disk.\n\nNOTE: the user is responsible to provide a vector X of mole fractions of species that sums up to one. If this is not respected RADCAL fails. The Following list provides the indexes of available species in vector X.\n\nIndex Species Index Species Index Species\n1 CO2 6 C2H6 11 CH3OH\n2 H2O 7 C3H6 12 MMA\n3 CO 8 C3H8 13 O2\n4 CH4 9 C7H8 14 N2\n5 C2H4 10 C7H16  \n\n\n\n\n\n","category":"method"},{"location":"RadCalNet/#RadCalNet.samplecols-Tuple{Int64, Int64}","page":"RadCalNet","title":"RadCalNet.samplecols","text":"Get sample of indexes for data retrieval.  \n\n\n\n\n\n","category":"method"},{"location":"RadCalNet/#RadCalNet.tests-Tuple{RadCalNet.ModelData, Int64}","page":"RadCalNet","title":"RadCalNet.tests","text":"Get testing data for data loader construction. \n\n\n\n\n\n","category":"method"},{"location":"RadCalNet/#RadCalNet.train-Tuple{RadCalNet.ModelData, Int64}","page":"RadCalNet","title":"RadCalNet.train","text":"Get training data for data loader construction. \n\n\n\n\n\n","category":"method"},{"location":"RadCalNet/#RadCalNet.trainonce!-Tuple{RadCalNet.ModelTrainer}","page":"RadCalNet","title":"RadCalNet.trainonce!","text":"trainonce!(trainer::ModelTrainer; num = 1_000)\n\nTrain model and keep track of loss for the number of epochs in trainer using its internal data and parameters. Use num data points.\n\n\n\n\n\n","category":"method"},{"location":"Teaching/Basilisk/Draft/#Planned-studies","page":"-","title":"Planned studies","text":"","category":"section"},{"location":"Teaching/Basilisk/Draft/","page":"-","title":"-","text":"Learning steps","category":"page"},{"location":"Teaching/Basilisk/Draft/","page":"-","title":"-","text":"- [x] [Base tutorial](http://basilisk.fr/Tutorial)\n- [ ] [Review of main examples](http://basilisk.fr/src/examples/README)\n- [ ] [Review of extra examples (1)](http://basilisk.fr/sandbox/Antoonvh/README)\n- [ ] [Review of extra examples (2)](http://basilisk.fr/sandbox/M1EMN/README)\n- [ ] [Review of main tests](http://basilisk.fr/src/test/README)\n- [ ] [Review of built-it solvers](http://basilisk.fr/src/README)\n- [ ] [Dimensional analysis tutorial](http://basilisk.fr/Tutorial.dimensions)\n- [ ] [Basilisk C](http://basilisk.fr/Basilisk%20C)\n- [ ] [Past papers](http://basilisk.fr/Bibliography)","category":"page"},{"location":"Teaching/Basilisk/Draft/","page":"-","title":"-","text":"Concluding projects","category":"page"},{"location":"Teaching/Basilisk/Draft/","page":"-","title":"-","text":"- [ ] Convection equation ([samples](http://basilisk.fr/sandbox/M1EMN/README))\n- [ ] Diffusion equation ([samples](http://basilisk.fr/sandbox/M1EMN/README))\n- [ ] Burgers equation\n- [ ] Cavity flow Navier-Stokes","category":"page"},{"location":"Teaching/Basilisk/Draft/","page":"-","title":"-","text":"Advanced projects","category":"page"},{"location":"Teaching/Basilisk/Draft/","page":"-","title":"-","text":"- [ ] Carbonitriding of low alloy steels\n- [ ] JMAK kinetics and heat transfer\n- [ ] Drag-out flow in plate coating\n- [ ] Graf's acetylene decomposition flow\n- [ ] Rising bubble in fluid","category":"page"},{"location":"Teaching/Basilisk/Draft/","page":"-","title":"-","text":"Things to check","category":"page"},{"location":"Teaching/Basilisk/Draft/","page":"-","title":"-","text":"- [ ] Running simulations in parallel\n- [ ] Evaporation and combustion in sandbox\n- [ ] Examples with [granular flows](http://basilisk.fr/sandbox/M1EMN/README#examples-of-granular-flows) and [silos](http://basilisk.fr/sandbox/M1EMN/Exemples/granular_sandglass.c)\n- [ ] Rising bubble with granular flow","category":"page"},{"location":"Teaching/Basilisk/Draft/#Commented-examples##-Teaching-plan","page":"-","title":"Commented examples## Teaching plan","text":"","category":"section"},{"location":"Teaching/Basilisk/Draft/#Week-1","page":"-","title":"Week 1","text":"","category":"section"},{"location":"Teaching/Basilisk/Draft/","page":"-","title":"-","text":"In-class: Fundamentals of scientific computing (history, basics of hardware, number representations, numerical solvers, parallel computing, etc.)\nTutorial: Basics of Linux command line, VIM text editor, programming in C (with mini-projects), and Basilisk C.","category":"page"},{"location":"Teaching/Basilisk/Draft/#Week-2","page":"-","title":"Week 2","text":"","category":"section"},{"location":"Teaching/Basilisk/Draft/","page":"-","title":"-","text":"In-class: \nTutorial: ","category":"page"},{"location":"Teaching/Basilisk/Draft/#Week-3","page":"-","title":"Week 3","text":"","category":"section"},{"location":"Teaching/Basilisk/Draft/","page":"-","title":"-","text":"In-class: \nTutorial: ","category":"page"},{"location":"Teaching/Basilisk/Draft/#Week-4","page":"-","title":"Week 4","text":"","category":"section"},{"location":"Teaching/Basilisk/Draft/","page":"-","title":"-","text":"In-class: \nTutorial: ","category":"page"},{"location":"Teaching/Basilisk/Draft/#Week-5","page":"-","title":"Week 5","text":"","category":"section"},{"location":"Teaching/Basilisk/Draft/","page":"-","title":"-","text":"In-class: \nTutorial: ","category":"page"},{"location":"Teaching/Basilisk/Draft/#Week-6","page":"-","title":"Week 6","text":"","category":"section"},{"location":"Teaching/Basilisk/Draft/","page":"-","title":"-","text":"In-class: \nTutorial: ","category":"page"},{"location":"Cantera/samples/#Cantera-samples","page":"Cantera samples","title":"Cantera samples","text":"","category":"section"},{"location":"Cantera/samples/","page":"Cantera samples","title":"Cantera samples","text":"# cantera = \"C:\\\\Program Files\\\\Cantera\\\\bin\\\\cantera_shared.dll\"\n#\n# ENV[\"CANTERA_SHARED\"] = cantera\n# @assert haskey(ENV, \"CANTERA_SHARED\")\n#\n# FIXME: how to run this in GitHub???\n#\n# @assert ct.appdelete()\n# @assert ct.resetstorage()\n# @assert ct.clearstorage()\n# @assert ct.suppress_thermo_warnings(true)\n# @assert ct.use_legacy_rate_constants(false)\n#\n# sol = ct.Solution(\"gri30.yaml\", \"gri30\", \"mixture-averaged\")\n# gas = ct.Solution(\"gri30.yaml\", \"gri30\", \"mixture-averaged\")\n#\n# Xᵣ = zeros(sol.nspecies)\n# Xᵣ[1] = 1.0\n#\n# Tᵣ = 3500.0\n# Pᵣ = 50000.0\n#\n# ct.set_TPX!(sol, Tᵣ, Pᵣ, Xᵣ; norm = true)\n#\n# @assert ct.gettemperature(sol) ≈ Tᵣ\n# @assert ct.getpressure(sol) ≈ Pᵣ\n# @assert all(ct.getmolefractions(sol) ≈ Xᵣ)\n#\n# ct.equilibrate!(sol, \"HP\", print_results = true)","category":"page"},{"location":"toc/#Table-of-contents","page":"Table of Contents","title":"Table of contents","text":"","category":"section"},{"location":"toc/","page":"Table of Contents","title":"Table of Contents","text":"Depth = 4","category":"page"},{"location":"DryGranular/#DryGranular","page":"DryGranular","title":"DryGranular","text":"","category":"section"},{"location":"DryGranular/","page":"DryGranular","title":"DryGranular","text":"CurrentModule = DryGranular\nDocTestSetup  = quote\n    using Statistics\n    using DryGranular\nend","category":"page"},{"location":"DryGranular/#General-porous-media","page":"DryGranular","title":"General porous media","text":"","category":"section"},{"location":"DryGranular/","page":"DryGranular","title":"DryGranular","text":"Modeling of geometrical characteristics of porous beds is required for including both their thermal effect or role over chemistry in chemical reactors. A classical approach used in several commercial and open source tools is that of Gunn [1]. In what follows we develop the ideas that lead to an analogous model which is implemented by this structure.","category":"page"},{"location":"DryGranular/","page":"DryGranular","title":"DryGranular","text":"To build the model we will assume a reactor of constant rectangular cross-section A_r=bw and volume V_R=bwh. Its cross-section perimeter is then P_R=2(b+w). Inside this reactor we randomly pack cubic particles beta of surface area A_beta=6l_beta^2 and volume V_beta=l_beta^3 at a porosity level phi. Thus the total volume of solids inside the reactor is V_S=(1-phi)V_R and the approximate number of particles N=fracV_SV_beta. Following a similar reasoning the total surface area of particles is A_S=NA_beta. Performing all the substitutions so far one finds the following expression","category":"page"},{"location":"DryGranular/","page":"DryGranular","title":"DryGranular","text":"A_S=frac6(1-phi)bwhl_beta","category":"page"},{"location":"DryGranular/","page":"DryGranular","title":"DryGranular","text":"Since the differential dA=Pdl holds for the surface of a body over its length l, one can divide the above expression by the reactor length to get the perimeter of particles in a cross-section. We can further divide by the cross-section area itself and find the perimeter density which is a more general result, and find the expression proposed by Gunn [1]. This result is summarized in the next equation where the subscript of particle size was dropped for generality.","category":"page"},{"location":"DryGranular/","page":"DryGranular","title":"DryGranular","text":"P = frac6(1-phi)l","category":"page"},{"location":"DryGranular/","page":"DryGranular","title":"DryGranular","text":"An estimator of the number of channels per unit cross-section of reactor N can be related to the porosity through NpiR^2=phi. Because the above perimeter is shared between the fluid volume and solids, it holds that N2piR=P. Using these expressions one can solve for the porosity channels characteristic radius R as given below, which is also a result reported by Gunn [1].","category":"page"},{"location":"DryGranular/","page":"DryGranular","title":"DryGranular","text":"R=fracphil3(1-phi)","category":"page"},{"location":"DryGranular/","page":"DryGranular","title":"DryGranular","text":"This model is probided in PackedBedPorosityDescriptor.","category":"page"},{"location":"DryGranular/","page":"DryGranular","title":"DryGranular","text":"DryGranular.PackedBedPorosityDescriptor","category":"page"},{"location":"DryGranular/#DryGranular.PackedBedPorosityDescriptor","page":"DryGranular","title":"DryGranular.PackedBedPorosityDescriptor","text":"Provides description of porosity parameters with stochastic behavior.\n\nϕ::Union{Float64, Vector{Float64}}: Porosity volume fraction in medium [-].\nl::Union{Float64, Vector{Float64}}: Characteristic particle size in medium [m].\nσϕ::Union{Nothing, Float64}: Optional standard deviation of porosity volume fraction  [-].\nσl::Union{Nothing, Float64}: Optional standard deviation of characteristic particle size [m].\nP::Union{Float64, Vector{Float64}}: Perimeter in reactor cross-section [m].\nD::Union{Float64, Vector{Float64}}: Characteristic diameter of porosity channels [m].\nA::Float64: Reactor area used for scaling perimeter [m²].\n\n\n\n\n\n","category":"type"},{"location":"DryGranular/","page":"DryGranular","title":"DryGranular","text":"PackedBedPorosityDescriptor can be used to describe the geometry of exchange section of a packed bed for a single set of arguments.","category":"page"},{"location":"DryGranular/","page":"DryGranular","title":"DryGranular","text":"julia> PackedBedPorosityDescriptor(; ϕ = 0.65, l = 0.10, area = 1.0)\nPackedBedPorosityDescriptor(P = 21.000000 m, D = 0.123810 m)","category":"page"},{"location":"DryGranular/","page":"DryGranular","title":"DryGranular","text":"It can also be used to describe randomly varying reactors, what is a more realistic thing to do when using this structure to simulate real world systems.","category":"page"},{"location":"DryGranular/","page":"DryGranular","title":"DryGranular","text":"julia> PackedBedPorosityDescriptor(;\n            ϕ  = 0.65, l  = 0.10,\n            σϕ = 0.03, σl = 0.01,\n            N = 2,\n            ϕlims = (0.4, 0.8),\n            llims = (0.0, 0.3),\n            seed = 42,\n            area = 1.0\n        )\nPackedBedPorosityDescriptor(\n    P from  21.455749 m to  24.370742 m\n    D from   0.125589 m to   0.102353 m\n)","category":"page"},{"location":"DryGranular/#Rotary-kiln-models","page":"DryGranular","title":"Rotary kiln models","text":"","category":"section"},{"location":"DryGranular/","page":"DryGranular","title":"DryGranular","text":"In a rotary kiln as proposed by Kramers and Croockewite (1952) [2]. Its goal is to be used as a process support tool or to integrate more complex models requiring integration of the bed profile. In its classical statement, the bed height profile h(z) can be evaluated from volume of flowing material conservation through the following equations. Coordinate z=0 represents the discharge position where initial condition must be applied. This is given by the dam height, if any, or particle size.","category":"page"},{"location":"DryGranular/","page":"DryGranular","title":"DryGranular","text":"beginaligned\ndfracdhdz = C₁ leftfrachRleft(2 - frachRright)right^-frac32 - C₂6pt\nC₁             = frac34dfracΦtanγπ R^3 ω6pt\nC₂             = dfractanβcosγ\nendaligned","category":"page"},{"location":"DryGranular/","page":"DryGranular","title":"DryGranular","text":"The structure SymbolicLinearKramersModel implements the Kramers' ordinary differential equation for prediction of bed height profile in a rotary kiln. This equation is implemented under the formalism of ModelingToolkit.","category":"page"},{"location":"DryGranular/","page":"DryGranular","title":"DryGranular","text":"DryGranular.SymbolicLinearKramersModel","category":"page"},{"location":"DryGranular/#DryGranular.SymbolicLinearKramersModel","page":"DryGranular","title":"DryGranular.SymbolicLinearKramersModel","text":"Creates a reusable linear Kramers model for rotary kiln simulation.\n\nR::Symbolics.Num: Symbolic kiln internal radius\nΦ::Symbolics.Num: Symbolic kiln feed rate\nω::Symbolics.Num: Symbolic kiln rotation rate\nβ::Symbolics.Num: Symbolic kiln slope\nγ::Symbolics.Num: Symbolic solids repose angle\nz::Symbolics.Num: Symbolic kiln axial coordinates\nh::Symbolics.Num: Symbolic bed height profile\nsys::ModelingToolkit.ODESystem: Problem ordinary differential equation\n\n\n\n\n\n","category":"type"},{"location":"DryGranular/","page":"DryGranular","title":"DryGranular","text":"For integration of this model we implement RotaryKilnBedSolution. It provides the solved description of a rotary kiln bed geometry computed from the solution of bed height along the kiln length. The main goal of the quantities computed here is their use with heat and mass transfer models for the simulation of rotary kiln process. A simple post-processing utilitiy plotlinearkramersmodel is also provided.","category":"page"},{"location":"DryGranular/","page":"DryGranular","title":"DryGranular","text":"DryGranular.RotaryKilnBedSolution\nDryGranular.plotlinearkramersmodel","category":"page"},{"location":"DryGranular/#DryGranular.RotaryKilnBedSolution","page":"DryGranular","title":"DryGranular.RotaryKilnBedSolution","text":"General geometric description of a bed from Kramers equation solution.\n\nz::Vector{Float64}: Solution coordinates [m]\nh::Vector{Float64}: Solution bed height [m]\nθ::Vector{Float64}: View angle from kiln center [rad]\nl::Vector{Float64}: Bed-freeboard cord length [m]\nA::Vector{Float64}: Local bed cross section area [m²]\nη::Vector{Float64}: Local loading based on height [-]\nηₘ::Float64: Mean loading of kiln [%]\nV::Float64: Bed integral volume [m³]\nτ::Float64: Residence time of particles\nβ::Float64: Kiln slope [rad]\n\nArguments\n\nInternal elements are initialized through the following constructor:\n\nRotaryKilnBedSolution(z, h, β, R, Φ)\n\nWhere parameters are given as:\n\nz: solution coordinates over length, [m].\nh: bed profile solution over length, [m].\nR: kiln internal radius, [m].\nΦ: kiln feed rate, [m³/s].\n\nAn outer constructor is also provided for managing the integration of an instance of SymbolicLinearKramersModel. This is the recommended usage that is illustrated below.\n\nImportant: inputs must be provided in international system (SI) units as a better physical practice. The only exception is the rotation rate ω provided in revolution multiples. If the discharge end is held by a dam, its height must be provided instead of the particle size, as it is used as the ODE initial condition.\n\nmodel: a symbolic kiln model.\nL: kiln length, [m].\nR: kiln internal radius, [m].\nΦ: kiln feed rate, [m³/s].\nω: kiln rotation rate, [rev/s].\nβ: kiln slope, [rad].\nγ: solids repose angle, [rad].\nd: particle size or dam height, [m].\nsolver: Solver for DifferentialEquations. Defaults to Tsit5.\nrtol: Relative integration tolerance. Defaults to 1.0e-08.\natol: Absolute integration tolerance. Defaults to 1.0e-08.\n\n\n\n\n\n","category":"type"},{"location":"DryGranular/#DryGranular.plotlinearkramersmodel","page":"DryGranular","title":"DryGranular.plotlinearkramersmodel","text":"plotlinearkramersmodel(\n    model::RotaryKilnBedSolution;\n    normz::Bool = false,\n    normh::Bool = false\n)::Figure\n\nStandardized plotting of RotaryKilnBedSolution bed profile. It supports normalization of axes throught keywords normz for axial coordinate and normh for bed depth.\n\n\n\n\n\n","category":"function"},{"location":"DryGranular/","page":"DryGranular","title":"DryGranular","text":"Data in next example is an SI conversion of an example from Kramers and Croockewite (1952) [2].","category":"page"},{"location":"DryGranular/","page":"DryGranular","title":"DryGranular","text":"julia> L = 13.715999999999998;  # Kiln length [m]\n\njulia> D = 1.8897599999999999;  # Kiln diameter [m]\n\njulia> β = 2.3859440303888126;  # Kiln slope [°]\n\njulia> γ = 45.0;                # Repose angle [°]\n\njulia> d = 1.0;                 # Particle/dam size [mm]\n\njulia> Φ = 10.363965852671996;  # Feed rate [m³/h]\n\njulia> ω = 3.0300000000000002;  # Rotation rate [rev/min]\n\njulia> bed = RotaryKilnBedSolution(;\n            model = SymbolicLinearKramersModel(),\n            L     = L,\n            R     = D / 2.0,\n            Φ     = Φ / 3600.0,\n            ω     = ω / 60.0,\n            β     = deg2rad(β),\n            γ     = deg2rad(γ),\n            d     = d / 1000.0\n        );\n\njulia> bed\nRotaryKilnBedSolution(τ = 13.169938 min, ηₘ = 5.913271 %)\n\njulia> bed.τ\n790.1963002204403","category":"page"},{"location":"DryGranular/","page":"DryGranular","title":"DryGranular","text":"In the following dummy example we force a very thick analytical bed solution, filling the radius of the rotary drum. ","category":"page"},{"location":"DryGranular/","page":"DryGranular","title":"DryGranular","text":"julia> R = 1.0e+00;\n\njulia> Φ = 1.0e-02;\n\njulia> z = collect(0.0:0.1:10.0);\n\njulia> h = R * ones(size(z));\n\njulia> Aₐ = π * R^2 / 2;\n\njulia> Vₐ = Aₐ * z[end];\n\njulia> bed = RotaryKilnBedSolution(z, h, 0, R, Φ)\nRotaryKilnBedSolution(τ = 26.179939 min, ηₘ = 50.000000 %)","category":"page"},{"location":"DryGranular/","page":"DryGranular","title":"DryGranular","text":"Next we confirm the internal evaluations of the model match the expected analytical values.","category":"page"},{"location":"DryGranular/","page":"DryGranular","title":"DryGranular","text":"julia> mean(bed.θ) ≈ π\ntrue\n\njulia> mean(bed.l) ≈ 2R\ntrue\n\njulia> mean(bed.A) ≈ Aₐ\ntrue\n\njulia> mean(bed.η) ≈ 0.5\ntrue\n\njulia> bed.ηₘ ≈ 50.0\ntrue\n\njulia> bed.V ≈ Vₐ\ntrue\n\njulia> bed.τ ≈ Vₐ / Φ\ntrue","category":"page"},{"location":"DryGranular/","page":"DryGranular","title":"DryGranular","text":"Validation of Kramers' model is provided here.","category":"page"},{"location":"DryGranular/","page":"DryGranular","title":"DryGranular","text":"Finally a set of basic equations provided for process analysis.","category":"page"},{"location":"DryGranular/","page":"DryGranular","title":"DryGranular","text":"DryGranular.sullivansηₘ\nDryGranular.dimlessNΦ\nDryGranular.dimlessNₖ\nDryGranular.perrayresidence\nDryGranular.kramersnlapprox","category":"page"},{"location":"DryGranular/#DryGranular.sullivansηₘ","page":"DryGranular","title":"DryGranular.sullivansηₘ","text":"Sullivans approximation to kiln filling.\n\n\n\n\n\n","category":"function"},{"location":"DryGranular/#DryGranular.dimlessNΦ","page":"DryGranular","title":"DryGranular.dimlessNΦ","text":"Kramers (1952) dimensionless group NΦ.\n\n\n\n\n\n","category":"function"},{"location":"DryGranular/#DryGranular.dimlessNₖ","page":"DryGranular","title":"DryGranular.dimlessNₖ","text":"Kramers (1952) dimensionless group Nₖ.\n\n\n\n\n\n","category":"function"},{"location":"DryGranular/#DryGranular.perrayresidence","page":"DryGranular","title":"DryGranular.perrayresidence","text":"Compute residence time from Peray's equation.\n\n\n\n\n\n","category":"function"},{"location":"DryGranular/#DryGranular.kramersnlapprox","page":"DryGranular","title":"DryGranular.kramersnlapprox","text":"Nonlinear formulation of Kramers model approximate solution.\n\n\n\n\n\n","category":"function"},{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"D. J. Gunn. Transfer of heat or mass to particles in fixed and fluidised beds. International Journal of Heat and Mass Transfer 21, 467–476 (1978).\n\n\n\nH. Kramers and P. Croockewit. The passage of granular solids through inclined rotary kilns. Chemical Engineering Science 1, 259–265 (1952).\n\n\n\nW. L. Grosshandler. Radcal – a narrow-band model for radiation calculations in a combustion environment (National Institute of Standards and Technology, 1993).\n\n\n\nJ. P. Gorog, J. K. Brimacombe and T. N. Adams. Radiative heat transfer in rotary kilns. Metallurgical Transactions B 12, 55–70 (1981).\n\n\n\nW. C. Tam and W. W. Yuen. OpenSC: an open-source calculation tool for combustion mixture emissivity/absorptivity (National Institute of Standards and Technology, 2019).\n\n\n\n","category":"page"},{"location":"Teaching/Basilisk/Basilisk/","page":"Basilisk","title":"Basilisk","text":"The goal of this material is to provide support to teaching introductory computational fluid mechanics with aid of Basilisk. The studies are based on commented tutorials and a documentation guide extending what is already provided with the package.","category":"page"},{"location":"Teaching/Basilisk/Basilisk/","page":"Basilisk","title":"Basilisk","text":"Although Basilisk is a very interesting dialect of C, its documentation is still old-fashioned and lack some structuration. Also sample programs are not written to be easily managed and extended for use in variant cases. Here we propose a structure for creating better projects with Basilisk:","category":"page"},{"location":"Teaching/Basilisk/Basilisk/","page":"Basilisk","title":"Basilisk","text":"A Basilisk project lives in its own folder: one executable means one directory.\nThe main file is called app.c and contains a very simple structure as provided in the dummy listing bellow. All the logic of a project, i.e. the events, is implemented in separate header files that are included after Basilisk includes.","category":"page"},{"location":"Teaching/Basilisk/Basilisk/","page":"Basilisk","title":"Basilisk","text":"// Definitions\n#define LEVEL 7\n#define ...\n\n// Basilisk includes.\n#include \"grid/multigrid.h\"\n#include \"run.h\"\n#include ...  \n\n// Project includes.\n#include \"project-base.h\"\n#include \"project-init.h\"\n#include \"project-post.h\"\n#include \"project-exec.h\"\n\nint main() {\n\tinit_grid(1 << LEVEL);\n\t...\n\trun();\n}","category":"page"},{"location":"Teaching/Basilisk/Basilisk/","page":"Basilisk","title":"Basilisk","text":"A simpler Makefile than Basilisk's default one is used for project building.","category":"page"},{"location":"Teaching/Basilisk/Basilisk/","page":"Basilisk","title":"Basilisk","text":"The source code for the studies is provided here.","category":"page"},{"location":"DryFlowsheet/#DryFlowsheet","page":"DryFlowsheet","title":"DryFlowsheet","text":"","category":"section"},{"location":"DryFlowsheet/","page":"DryFlowsheet","title":"DryFlowsheet","text":"CurrentModule = DryFlowsheet","category":"page"},{"location":"DryFlowsheet/","page":"DryFlowsheet","title":"DryFlowsheet","text":"Modules = [ DryFlowsheet ]","category":"page"},{"location":"DryFlowsheet/#DryFlowsheet.CooledCrushingMill","page":"DryFlowsheet","title":"DryFlowsheet.CooledCrushingMill","text":"Represents a crushing device with cooling system.\n\nModels\n\n:TARGET_COOLANT_TEMP evaluates the heat transfer lost to coolant provided a target final stream temperature given by keyword argument temp_out. Product temperature is updated through an EnergyStream built with energy exchange computed through exchanged_heat, so that numerical value can be slightly different from target value.\n:USING_GLOBAL_HTC makes use of a global heat transfer coefficient to evaluate heat flux across the cooling stream.\n\nAttributes\n\nrawmeal: The input meal applied to crushing process.\nproduct: The output material stream at the end of product pipeline.\ncoolant: The output material stream at the end of cooling pipeline.\npower: The power applied to the crushing process [W]\nloss: The heat exchanged in between product and cooling pipelines [W].\nglobalhtc: Global heat transfer coefficient [W/K].\n\n\n\n\n\n","category":"type"},{"location":"DryFlowsheet/#DryFlowsheet.EnergyStream","page":"DryFlowsheet","title":"DryFlowsheet.EnergyStream","text":"Represents an energy stream.\n\nAttributes\n\nḣ: Energy flow provided by stream [W].\n\n\n\n\n\n","category":"type"},{"location":"DryFlowsheet/#DryFlowsheet.MaterialStream","page":"DryFlowsheet","title":"DryFlowsheet.MaterialStream","text":"Represents a material stream.\n\nAttributes\n\nṁ: Material mass flow rate [kg/s].\nT: Stream temperature [K].\nP: Stream pressure [Pa].\nY: Components mass fractions [-].\npipeline: Materials pipeline associated to Y.\n\n\n\n\n\n","category":"type"},{"location":"DryFlowsheet/#DryFlowsheet.SolidsSeparator","page":"DryFlowsheet","title":"DryFlowsheet.SolidsSeparator","text":"Represents a solids separator with efficiency η.\n\nTo-do's\n\nAdd inverse model to automatically tune efficiency η.\n\nAttributes\n\nη: Solids separation efficiency [-].\nsource: The stream to be separated into solids and others.\nsolids: The output solids stream.\nothers: The output remaining stream.\n\n\n\n\n\n","category":"type"},{"location":"DryFlowsheet/#DryFlowsheet.StreamPipeline","page":"DryFlowsheet","title":"DryFlowsheet.StreamPipeline","text":"Array of materials to include in a stream.\n\n\n\n\n\n","category":"type"},{"location":"DryFlowsheet/#DryFlowsheet.TransportPipeline","page":"DryFlowsheet","title":"DryFlowsheet.TransportPipeline","text":"Represents a pipeline with heat transfer.\n\nModels\n\n:TARGET_EXIT_TEMP evaluates the heat transfer lost to environment provided a target final stream temperature given by keyword argument temp_out. Product temperature is updated through an EnergyStream built with energy exchange computed through exchanged_heat, so that numerical value can be slightly different from target value.\n:USING_GLOBAL_HTC makes use of a global heat transfer coefficient to evaluate heat flux across the pipe.\n\nTo-do's\n\nImplement heat transfer losses through a convective heat transfer coefficient (HTC) computed from a suitable Nusselt number, for use of pipeline in simulation mode.\n\nAttributes\n\nproduct: The output material stream at the end of pipeline.\npower: The heat exchanged in pipeline [W].\n\n\n\n\n\n","category":"type"},{"location":"DryFlowsheet/#DryFlowsheet.cooled_crushing-Tuple{}","page":"DryFlowsheet","title":"DryFlowsheet.cooled_crushing","text":"Manage use of CooledCrushingMill with different models.\n\n\n\n\n\n","category":"method"},{"location":"DryFlowsheet/#DryFlowsheet.enthalpyflowrate","page":"DryFlowsheet","title":"DryFlowsheet.enthalpyflowrate","text":"Enthalpy flow rate of given stream [W].\n\n\n\n\n\n","category":"function"},{"location":"DryFlowsheet/#DryFlowsheet.exchanged_heat-Tuple{MaterialStream, Any}","page":"DryFlowsheet","title":"DryFlowsheet.exchanged_heat","text":"Heat exchanged with stream to match outlet temperature.\n\n\n\n\n\n","category":"method"},{"location":"DryFlowsheet/#DryFlowsheet.transport_pipe-NTuple{4, Any}","page":"DryFlowsheet","title":"DryFlowsheet.transport_pipe","text":"Manage use of TransportPipeline with different models.\n\n\n\n\n\n","category":"method"},{"location":"helpers/#Helpers","page":"Helpers","title":"Helpers","text":"","category":"section"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"The core packages of WallyToolbox ecosystem provide shared functionalities and types that are used in several other more specialized packages. This allows for standardization of interfaces, employed quantities, and avoid boilerplate code. This page organizes everything to facilitate the understanding of the end-user. Knowing the base helper packages DryConstants and DryUtilities is key for proper usage of WallyToolbox.","category":"page"},{"location":"helpers/#DryConstants","page":"Helpers","title":"DryConstants","text":"","category":"section"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"CurrentModule = DryConstants","category":"page"},{"location":"helpers/#Physical-constants","page":"Helpers","title":"Physical constants","text":"","category":"section"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"DryConstants.GAS_CONSTANT\nDryConstants.STEFAN_BOLTZMANN","category":"page"},{"location":"helpers/#DryConstants.GAS_CONSTANT","page":"Helpers","title":"DryConstants.GAS_CONSTANT","text":"Ideal gas constant [J/(mol.K)].\n\n\n\n\n\n","category":"constant"},{"location":"helpers/#DryConstants.STEFAN_BOLTZMANN","page":"Helpers","title":"DryConstants.STEFAN_BOLTZMANN","text":"Stefan-Boltzmann constant [W/(m².K⁴)].\n\n\n\n\n\n","category":"constant"},{"location":"helpers/#Reference-states","page":"Helpers","title":"Reference states","text":"","category":"section"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"DryConstants.T_REF\nDryConstants.P_REF\nDryConstants.C_REF","category":"page"},{"location":"helpers/#DryConstants.T_REF","page":"Helpers","title":"DryConstants.T_REF","text":"Normal atmospheric temperature [K].\n\n\n\n\n\n","category":"constant"},{"location":"helpers/#DryConstants.P_REF","page":"Helpers","title":"DryConstants.P_REF","text":"Reference atmospheric pressure [Pa].\n\n\n\n\n\n","category":"constant"},{"location":"helpers/#DryConstants.C_REF","page":"Helpers","title":"DryConstants.C_REF","text":"Normal state concentration [mol/m³]. \n\n\n\n\n\n","category":"constant"},{"location":"helpers/#Other-constants","page":"Helpers","title":"Other constants","text":"","category":"section"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"DryConstants.ZERO_CELSIUS\nDryConstants.ONE_ATM\nDryConstants.M_AIR","category":"page"},{"location":"helpers/#DryConstants.ZERO_CELSIUS","page":"Helpers","title":"DryConstants.ZERO_CELSIUS","text":"Zero degrees Celsius in Kelvin [273.15 K].\n\n\n\n\n\n","category":"constant"},{"location":"helpers/#DryConstants.ONE_ATM","page":"Helpers","title":"DryConstants.ONE_ATM","text":"Atmospheric pressure at sea level [101325.0 Pa].\n\n\n\n\n\n","category":"constant"},{"location":"helpers/#DryConstants.M_AIR","page":"Helpers","title":"DryConstants.M_AIR","text":"Air mean molecular mass [kg/mol].\n\n\n\n\n\n","category":"constant"},{"location":"helpers/#DryUtilities","page":"Helpers","title":"DryUtilities","text":"","category":"section"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"CurrentModule = DryUtilities\nDocTestSetup  = quote\n    using DryUtilities\n    using DryUtilities: heaviside, interval, makestepwise1d\n    using DryUtilities: closestpowerofx, axesunitscaler\n    using DryUtilities: maxrelativechange, maxabsolutechange\nend","category":"page"},{"location":"helpers/#Haskell-like-array-slicing","page":"Helpers","title":"Haskell-like array slicing","text":"","category":"section"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"Those who know Haskell probably started learning it by manipulating lists with head and tail. Those functionalities are not available in Julia by default and array slicing - with an ugly syntax - is required. Since this is done often in the fields of application of DryTooling, both head and tail together with a body functions are available in its core. They are simple wrapers over the @view macro and work with both iterable types and arrays. The following snippet illustrates their usage.","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"julia> v = collect(1:4);\n\njulia> head(v) == [1; 2; 3]\ntrue\n\njulia> tail(v) == [2; 3; 4]\ntrue\n\njulia> body(v) == [2; 3]\ntrue","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"More examples are provided in the following documentation ahead of each of the functions.","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"julia> head(1:4)\n1:3\n\njulia> head([1, 2, 3, 4])\n3-element view(::Vector{Int64}, 1:3) with eltype Int64:\n 1\n 2\n 3\n","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"DryUtilities.head","category":"page"},{"location":"helpers/#DryUtilities.head","page":"Helpers","title":"DryUtilities.head","text":"head(z)\n\nAccess view of array head. See also tail and body.\n\n\n\n\n\n","category":"function"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"julia> tail([1, 2, 3, 4])\n3-element view(::Vector{Int64}, 2:4) with eltype Int64:\n 2\n 3\n 4\njulia> tail(1:4)\n2:4","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"DryUtilities.tail","category":"page"},{"location":"helpers/#DryUtilities.tail","page":"Helpers","title":"DryUtilities.tail","text":"tail(z)\n\nAccess view of array tail. See also head and body.\n\n\n\n\n\n","category":"function"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"julia> body([1, 2, 3, 4])\n2-element view(::Vector{Int64}, 2:3) with eltype Int64:\n 2\n 3\njulia> body(1:4)\n2:3","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"DryUtilities.body","category":"page"},{"location":"helpers/#DryUtilities.body","page":"Helpers","title":"DryUtilities.body","text":"body(z)\n\nAccess view of array body. See also  head and tail.\n\n\n\n\n\n","category":"function"},{"location":"helpers/#Handling-of-discontinuous-functions","page":"Helpers","title":"Handling of discontinuous functions","text":"","category":"section"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"Discontinuous functions are all over in real world applications. Whether they handle discrete signals sent to controllers or represent a material property change in the solution domain of a heat transfer simulation, they are often represented by a single or a composition of Heaviside step functions. Again, because its implementation is pretty simple and optimization routines require a differentiable form of this function, DryUtilities implements heaviside and interval as proposed in this StackOverflow answer.","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"julia> heaviside(-1) == 0\ntrue\n\njulia> heaviside(-1.0) == 0.0\ntrue\n\njulia> heaviside(0.0) == 0.5\ntrue\n\njulia> heaviside(1.0) == 1.0\ntrue\n\njulia> interval(10; a = 0, b = 10) == 0.5\ntrue","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"We see below that heaviside also works on ranges","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"julia> heaviside(-2:2)\n5-element Vector{Float64}:\n 0.0\n 0.0\n 0.5\n 1.0\n 1.0","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"DryUtilities.heaviside","category":"page"},{"location":"helpers/#DryUtilities.heaviside","page":"Helpers","title":"DryUtilities.heaviside","text":"heaviside(t)\n\nProvides a Heaviside function compatible with automatic differentiation. This is a requirement for conceiving, e.g., model predictive controls with discontinuous functions under ModelingToolkit.\n\n\n\n\n\n","category":"function"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"By implementation inheritance that is also the case for interval:","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"julia> interval(0:6; a = 2, b = 5)\n7-element Vector{Float64}:\n 0.0\n 0.0\n 0.5\n 1.0\n 1.0\n 0.5\n 0.0","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"DryUtilities.interval","category":"page"},{"location":"helpers/#DryUtilities.interval","page":"Helpers","title":"DryUtilities.interval","text":"interval(x; a=-Inf, b=Inf)\n\nReturns 1 if x  (a b), 1/2 for x = a  x = b, or 0.\n\n\n\n\n\n","category":"function"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"As it is the case for representation of specific heats using NASA7/NASA9 or Shomate polynomials, functions defined by parts with an specific change point are also required in physical modeling. To this end, a stepwise function can be established with makestepwise1d. If keyword differentialble = true, then the function makes use of the above interval and remains compatible with ModelingToolkit, for instance.","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"julia> f = makestepwise1d(x->x, x->x^2, 1.0; differentiable = true);\n\njulia> f(0:0.2:2.0)\n11-element Vector{Float64}:\n 0.0\n 0.2\n 0.4\n 0.6\n 0.8\n 1.0\n 1.44\n 1.9599999999999997\n 2.5600000000000005\n 3.24\n 4.0\n\njulia> using ModelingToolkit\n\njulia> @variables x\n1-element Vector{Num}:\n x\n\njulia> f(x); # Output is too long, try by yourself.","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"DryUtilities.makestepwise1d","category":"page"},{"location":"helpers/#DryUtilities.makestepwise1d","page":"Helpers","title":"DryUtilities.makestepwise1d","text":"makestepwise1d(lo, hi, xc)\n\nCreates an univariate function that is composed of two parts, the first evaluated before a critical domain point xc, and the second above that value. This is often required, for instance, for the evaluation of NASA polynomials for thermodynamic properties. If differentiable, then the returned function is compatible with symbolic argument as required when using package ModelingToolkit, etc.\n\n\n\n\n\n","category":"function"},{"location":"helpers/#Rounding-numbers-and-automatic-axes","page":"Helpers","title":"Rounding numbers and automatic axes","text":"","category":"section"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"danger: Danger\nThis section documents functions that are used in a very unstable context.","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"Simple rounding is not enough. Getting values that are rounded close to a power of a given number and rounded to floor or ceil is often the case. This is standardized in DryTooling through closestpowerofx:","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"julia> closestpowerofx(10)\n10\n\njulia> closestpowerofx(11)\n20\n\njulia> closestpowerofx(11, roundf = floor)\n10\n\njulia> closestpowerofx(11, x = 5, roundf = floor)\n10\n\njulia> closestpowerofx(12.0; x = 10)\n20\n\njulia> closestpowerofx(12.0; x = 10, roundf = floor)\n10\n\njulia> closestpowerofx(12.0; x = 10, roundf = round)\n10","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"DryUtilities.closestpowerofx","category":"page"},{"location":"helpers/#DryUtilities.closestpowerofx","page":"Helpers","title":"DryUtilities.closestpowerofx","text":"closestpowerofx(\n    v::Number;\n    x::Number = 10,\n    roundf::Function = ceil\n)::Int64\n\nCompute the integer power of x closest to v using roundf as rouding method. This might be useful for automatic setting more reasonable limits to plot axis or similar applications. Changing the rouding method through roundf is also possible.\n\n\n\n\n\n","category":"function"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"Below we illustrate the usage of axesunitscaler.","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"NOTE: this function is not yet stable. In the future it will instead return labels using symbols like k, M, G, etc., for the units through a flag provided by the user.","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"julia> axesunitscaler(1)\n(\"\", 1)\n\njulia> axesunitscaler(1000)\n(\"[×1000]\", 1000)\n\njulia> axesunitscaler(1000000)\n(\"[×1000000]\", 1000000)","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"DryUtilities.axesunitscaler","category":"page"},{"location":"helpers/#DryUtilities.axesunitscaler","page":"Helpers","title":"DryUtilities.axesunitscaler","text":"axesunitscaler(x::Number)::Tuple{String, Int64}\n\nFind scaling factor for multiples of 1000 units. Together with closestpowerofx this can be used to produce better automatic plot axes limits. The returned values provide the string for modifying the axis label and the associated scaling factor.\n\n\n\n\n\n","category":"function"},{"location":"helpers/#Computation-of-changes-and-residuals","page":"Helpers","title":"Computation of changes and residuals","text":"","category":"section"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"danger: Danger\nThis section documents functions that are used in a very unstable context.","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"DryUtilities.maxabsolutechange\nDryUtilities.maxrelativechange","category":"page"},{"location":"helpers/#DryUtilities.maxabsolutechange","page":"Helpers","title":"DryUtilities.maxabsolutechange","text":"Maximum absolute change in a solution array.\n\n\n\n\n\n","category":"function"},{"location":"helpers/#DryUtilities.maxrelativechange","page":"Helpers","title":"DryUtilities.maxrelativechange","text":"Maximum relative change in a solution array.\n\n\n\n\n\n","category":"function"},{"location":"helpers/#Unit-conversion","page":"Helpers","title":"Unit conversion","text":"","category":"section"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"DryUtilities.nm3_h_to_kg_h\nDryUtilities.kg_h_to_nm3_h","category":"page"},{"location":"helpers/#DryUtilities.nm3_h_to_kg_h","page":"Helpers","title":"DryUtilities.nm3_h_to_kg_h","text":"Convert [Nm³/h] to [kg/h].\n\n\n\n\n\n","category":"function"},{"location":"helpers/#DryUtilities.kg_h_to_nm3_h","page":"Helpers","title":"DryUtilities.kg_h_to_nm3_h","text":"Convert [kg/h] to [Nm³/h].\n\n\n\n\n\n","category":"function"},{"location":"helpers/#Others","page":"Helpers","title":"Others","text":"","category":"section"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"DryUtilities.defaultvalue","category":"page"},{"location":"helpers/#DryUtilities.defaultvalue","page":"Helpers","title":"DryUtilities.defaultvalue","text":"Syntax sugar for handling a possibly nothing value.\n\n\n\n\n\n","category":"function"},{"location":"helpers/#Abstract-types","page":"Helpers","title":"Abstract types","text":"","category":"section"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"CurrentModule = DryAbstract","category":"page"},{"location":"helpers/#Fixed-state-materials","page":"Helpers","title":"Fixed state materials","text":"","category":"section"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"DryAbstract.AbstractMaterial\nDryAbstract.AbstractSolidMaterial\nDryAbstract.AbstractLiquidMaterial\nDryAbstract.AbstractGasMaterial\nDryAbstract.AbstractSolidMineralPhase","category":"page"},{"location":"helpers/#DryAbstract.AbstractMaterial","page":"Helpers","title":"DryAbstract.AbstractMaterial","text":"Base type for any material substance.\n\n\n\n\n\n","category":"type"},{"location":"helpers/#DryAbstract.AbstractSolidMaterial","page":"Helpers","title":"DryAbstract.AbstractSolidMaterial","text":"Base type for solid materials.\n\n\n\n\n\n","category":"type"},{"location":"helpers/#DryAbstract.AbstractLiquidMaterial","page":"Helpers","title":"DryAbstract.AbstractLiquidMaterial","text":"Base type for liquid materials.\n\n\n\n\n\n","category":"type"},{"location":"helpers/#DryAbstract.AbstractGasMaterial","page":"Helpers","title":"DryAbstract.AbstractGasMaterial","text":"Base type for gas materials.\n\n\n\n\n\n","category":"type"},{"location":"helpers/#DryAbstract.AbstractSolidMineralPhase","page":"Helpers","title":"DryAbstract.AbstractSolidMineralPhase","text":"Base type for any mineral material.\n\n\n\n\n\n","category":"type"},{"location":"helpers/#Problem-solving-and-physical-models","page":"Helpers","title":"Problem solving and physical models","text":"","category":"section"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"DryAbstract.AbstractMatrixProblem\nDryAbstract.AbstractIterativeSolver\nDryAbstract.AbstractSolutionStorage\nDryAbstract.AbstractPhysicalModel","category":"page"},{"location":"helpers/#DryAbstract.AbstractMatrixProblem","page":"Helpers","title":"DryAbstract.AbstractMatrixProblem","text":"Base type for linear algebra problems.\n\n\n\n\n\n","category":"type"},{"location":"helpers/#DryAbstract.AbstractIterativeSolver","page":"Helpers","title":"DryAbstract.AbstractIterativeSolver","text":"Base type for (nonlinear) iterative solvers.\n\n\n\n\n\n","category":"type"},{"location":"helpers/#DryAbstract.AbstractSolutionStorage","page":"Helpers","title":"DryAbstract.AbstractSolutionStorage","text":"Base type for storing simulation solution.\n\n\n\n\n\n","category":"type"},{"location":"helpers/#DryAbstract.AbstractPhysicalModel","page":"Helpers","title":"DryAbstract.AbstractPhysicalModel","text":"Base type for physical models.\n\n\n\n\n\n","category":"type"},{"location":"helpers/#Transport,-thermodynamics,-and-kinetics","page":"Helpers","title":"Transport, thermodynamics, and kinetics","text":"","category":"section"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"DryAbstract.AbstractTransportModel\nDryAbstract.AbstractSolidTransport\nDryAbstract.AbstractGasThermo\nDryAbstract.AbstractSolidThermo\nDryAbstract.AbstractMixtureSubstance\nDryAbstract.AbstractMixturePhase\nDryAbstract.AbstractKineticsMechanism","category":"page"},{"location":"helpers/#DryAbstract.AbstractTransportModel","page":"Helpers","title":"DryAbstract.AbstractTransportModel","text":"Base type for transport models.\n\n\n\n\n\n","category":"type"},{"location":"helpers/#DryAbstract.AbstractSolidTransport","page":"Helpers","title":"DryAbstract.AbstractSolidTransport","text":"Base type for transport models.\n\n\n\n\n\n","category":"type"},{"location":"helpers/#DryAbstract.AbstractGasThermo","page":"Helpers","title":"DryAbstract.AbstractGasThermo","text":"Base type for thermodynamic models.\n\n\n\n\n\n","category":"type"},{"location":"helpers/#DryAbstract.AbstractSolidThermo","page":"Helpers","title":"DryAbstract.AbstractSolidThermo","text":"Base type for thermodynamic models.\n\n\n\n\n\n","category":"type"},{"location":"helpers/#DryAbstract.AbstractMixtureSubstance","page":"Helpers","title":"DryAbstract.AbstractMixtureSubstance","text":"Base type for simplified mixture substances.\n\n\n\n\n\n","category":"type"},{"location":"helpers/#DryAbstract.AbstractMixturePhase","page":"Helpers","title":"DryAbstract.AbstractMixturePhase","text":"Base type for simplified mixture phases.\n\n\n\n\n\n","category":"type"},{"location":"helpers/#DryAbstract.AbstractKineticsMechanism","page":"Helpers","title":"DryAbstract.AbstractKineticsMechanism","text":"Base type for coded kinetics mechanisms.\n\n\n\n\n\n","category":"type"},{"location":"helpers/#Finite-volume-method-and-relatives","page":"Helpers","title":"Finite volume method and relatives","text":"","category":"section"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"DryAbstract.AbstractDiffusionModel1D\nDryAbstract.AbstractGrid1D","category":"page"},{"location":"helpers/#DryAbstract.AbstractDiffusionModel1D","page":"Helpers","title":"DryAbstract.AbstractDiffusionModel1D","text":"Base type for diffusion (heat, species, ...) models.\n\n\n\n\n\n","category":"type"},{"location":"helpers/#DryAbstract.AbstractGrid1D","page":"Helpers","title":"DryAbstract.AbstractGrid1D","text":"Base type of one-dimensional grids.\n\n\n\n\n\n","category":"type"},{"location":"OpenFOAM/#OpenFOAM","page":"OpenFOAM","title":"OpenFOAM","text":"","category":"section"},{"location":"OpenFOAM/","page":"OpenFOAM","title":"OpenFOAM","text":"CurrentModule = OpenFOAM","category":"page"},{"location":"OpenFOAM/","page":"OpenFOAM","title":"OpenFOAM","text":"Modules = [ OpenFOAM ]","category":"page"},{"location":"OpenFOAM/#OpenFOAM.OPENFOAMBANNER","page":"OpenFOAM","title":"OpenFOAM.OPENFOAMBANNER","text":"Banner for all OpenFOAM files with right version.\n\n\n\n\n\n","category":"constant"},{"location":"OpenFOAM/#OpenFOAM.AbstractFlowRateProfile","page":"OpenFOAM","title":"OpenFOAM.AbstractFlowRateProfile","text":"Abstract type for flow rate profile distributions.\n\n\n\n\n\n","category":"type"},{"location":"OpenFOAM/#OpenFOAM.AbstractInjectionModel","page":"OpenFOAM","title":"OpenFOAM.AbstractInjectionModel","text":"Abstract type for injection models.\n\n\n\n\n\n","category":"type"},{"location":"OpenFOAM/#OpenFOAM.AbstractSizeDistribution","page":"OpenFOAM","title":"OpenFOAM.AbstractSizeDistribution","text":"Abstract type for particle size distributions.\n\n\n\n\n\n","category":"type"},{"location":"OpenFOAM/#OpenFOAM.ConstantFlowRateProfile","page":"OpenFOAM","title":"OpenFOAM.ConstantFlowRateProfile","text":"Constant flow rate profile.\n\n\n\n\n\n","category":"type"},{"location":"OpenFOAM/#OpenFOAM.InjectionModel","page":"OpenFOAM","title":"OpenFOAM.InjectionModel","text":"Represents a generic particle injection model.\n\nConstraints imposed by OpenFOAM:\n\nnParticle makes massFlowRate and massTotal to be ignored.\nmassTotal cannot be used in steady state simulations.\nif flowRateProfile is not found a constant massFlowRate profile is computed from the ratio of massTotal and duration.\n\nTo-do:\n\nCheck if parcelBasisType from is applicable to derived types.\n\nmassFlowRate::Number: Particles mass flow rate if nParticle is not provided.\nmassTotal::Number: Total mass to be injected if nParticle is not provided.\nSOI::Number: Start of injection in seconds (base).\nduration::Number: Duration of injection in seconds (base).\nnParticle::Number: Number of particles per parcel.\nuniformParcelSize::UniformParcelSize: Quantity that is constant in parcels (base).\nflowRateProfile::OpenFOAM.AbstractFlowRateProfile: Type of flow rate profile to apply.\n\n\n\n\n\n","category":"type"},{"location":"OpenFOAM/#OpenFOAM.PatchInjection","page":"OpenFOAM","title":"OpenFOAM.PatchInjection","text":"Represents a patch injection model.\n\nname::String: Name to use in injection models list.\npatchName::String: Patch where injection is applied.\ninjectionModel::InjectionModel: Object pointing to general injection model.\nU0::Velocity: Particles injection velocity vector.\nparcelsPerSecond::Number: Number of parcels injected per second.\nsizeDistribution::OpenFOAM.AbstractSizeDistribution: Particle size distribution.\n\n\n\n\n\n","category":"type"},{"location":"OpenFOAM/#OpenFOAM.TableFlowRateProfile","page":"OpenFOAM","title":"OpenFOAM.TableFlowRateProfile","text":"Table flow rate profile.\n\n\n\n\n\n","category":"type"},{"location":"OpenFOAM/#OpenFOAM.TabulatedDensity","page":"OpenFOAM","title":"OpenFOAM.TabulatedDensity","text":"Tabulated density size distribution.\n\n\n\n\n\n","category":"type"},{"location":"OpenFOAM/#OpenFOAM.UniformParcelSize","page":"OpenFOAM","title":"OpenFOAM.UniformParcelSize","text":"Types of uniform parcel sizes.\n\n\n\n\n\n","category":"type"},{"location":"OpenFOAM/#OpenFOAM.Velocity","page":"OpenFOAM","title":"OpenFOAM.Velocity","text":"Simple wraper velocity vector.\n\n\n\n\n\n","category":"type"},{"location":"OpenFOAM/#OpenFOAM.asint-Tuple{Any}","page":"OpenFOAM","title":"OpenFOAM.asint","text":"Round and convert number to an integer.\n\n\n\n\n\n","category":"method"},{"location":"OpenFOAM/#OpenFOAM.parcels_per_second-Tuple{}","page":"OpenFOAM","title":"OpenFOAM.parcels_per_second","text":"parcelstoinject2d(;\n    mdot::Float64,\n    rhop::Float64,\n    diam::Float64,\n    nParticle::Int64 = 1\n)\n\nComputes the flow rate of parcels for a given mean particle size and number of particles per parcels. This is inteded as a helper to create a patchInjection element in the injectionModels of cloudProperties file.\n\n\n\n\n\n","category":"method"},{"location":"OpenFOAM/#OpenFOAM.spheremass-Tuple{Any, Any}","page":"OpenFOAM","title":"OpenFOAM.spheremass","text":"The mass of a sphere of density rho and diameter diam.\n\n\n\n\n\n","category":"method"},{"location":"OpenFOAM/#OpenFOAM.spherevolume-Tuple{Any}","page":"OpenFOAM","title":"OpenFOAM.spherevolume","text":"The volume of a sphere of diameter diam.\n\n\n\n\n\n","category":"method"},{"location":"OpenFOAM/#OpenFOAM.tabulate-Tuple{Any, Any}","page":"OpenFOAM","title":"OpenFOAM.tabulate","text":"Compose table entries in typical OpenFOAM format.\n\n\n\n\n\n","category":"method"},{"location":"Teaching/Basilisk/Documentation/#Built-in-solvers","page":"-","title":"Built-in solvers","text":"","category":"section"},{"location":"Teaching/Basilisk/Documentation/","page":"-","title":"-","text":"Basic component solvers:","category":"page"},{"location":"Teaching/Basilisk/Documentation/","page":"-","title":"-","text":"advection.h\ndiffusion.h\npoisson.h","category":"page"},{"location":"Teaching/Basilisk/Documentation/","page":"-","title":"-","text":"It is upon these that the Navier-Stokes equation can be assembled in:","category":"page"},{"location":"Teaching/Basilisk/Documentation/","page":"-","title":"-","text":"navier-stokes/stream.hsolves a 2D incompressible, constant density, constant viscosity Navier-Stokes equation formulated in the vorticity omega. This is and advection-diffusion equation solved with a flux-based advection scheme in advection.h. Given its form, the stream function psi is solver through the poisson.h solver.\nnavier-stokes/centered.h","category":"page"},{"location":"Teaching/Basilisk/Documentation/","page":"-","title":"-","text":"Other equations:","category":"page"},{"location":"Teaching/Basilisk/Documentation/","page":"-","title":"-","text":"saint-venant.h","category":"page"},{"location":"Teaching/Basilisk/Documentation/#Headers-files","page":"-","title":"Headers files","text":"","category":"section"},{"location":"Teaching/Basilisk/Documentation/","page":"-","title":"-","text":"File Usage\ncommon.h \ndistance.h \nembed.h Allow the creation of general shape boundary conditions inside the domain.\nfractions.h \nlambda2.h Detection of vortex using the criteria by [[@Jeong1995a]].\nrun.h A generic time loop which executes until termination (to be avoided!).\ntracer.h Provides an event to integrate the advection of tracer elements.\nutils.h \nview.h ","category":"page"},{"location":"Teaching/Basilisk/Documentation/","page":"-","title":"-","text":"File Usage\ngrid/cartesian.h \ngrid/multigrid.h \ngrid/octree.h \ngrid/bitree.h ","category":"page"},{"location":"Teaching/Basilisk/Documentation/#Data-types","page":"-","title":"Data types","text":"","category":"section"},{"location":"Teaching/Basilisk/Documentation/","page":"-","title":"-","text":"scalar\nvector\nface\nmsgstats convergence statistics of (multigrid?) solver.","category":"page"},{"location":"Teaching/Basilisk/Documentation/#Functions","page":"-","title":"Functions","text":"","category":"section"},{"location":"Teaching/Basilisk/Documentation/","page":"-","title":"-","text":"Function Definition Uses\norigin common.h Set the origin of cartesian system.\ninit_grid grid/ (overloaded) Level of refinement (size) of initial grid.\nsize  \nperiodic  Set periodic boundary conditions.\nstatsf utils.h Retrieve statistics of a scalar field.\noutput_ppm output.h Generate a image and video output.\nadapt_wavelet grid/tree-common.h Adaptive grid refinement routine.\nrun run.h (overloaded) Generic time loop for events execution.\nnoise  Generate random noise in -1 1.\nswap  Swap values of two scalar arrays.\ninput_stl distance.h Read an STL file as an array of triplets.\nbounding_box distance.h Determines the bounding box of inputs (segments or triangles).\ndistance distance.h Distance to coordinate.\nview draw.h Setup of viewing (camera) parameters.\nisosurface draw.h Displays an isosurface of a field.\ndraw_vof draw.h Display VOF reconstructed interfaces.\nclear draw.h Removes previous objects.\nsave view.h Dumps image(s) to file.\nrefine_biquadradic grid/multigrid-common.h \nwavelet grid/multigrid-common.h \ninverse_wavelet grid/multigrid-common.h \nboundary_level  \nunrefine  \nvorticity utils.h Computes the vorticity from a velocity field.","category":"page"},{"location":"Teaching/Basilisk/Tutorials/#Introductory","page":"-","title":"Introductory","text":"","category":"section"},{"location":"Teaching/Basilisk/Tutorials/#Basilisk-basics","page":"-","title":"Basilisk basics","text":"","category":"section"},{"location":"Teaching/Basilisk/Tutorials/","page":"-","title":"-","text":"Reference Tutorial\nCode 01-Tutorial-Basics\nNotes Basilisk is a conceptual solver for investigating problems in a Cartesian domain.<br><br>Different steps of the simulations are set by event's, which use a specific syntax do indicate whether they depend on a time or iteration condition. These steps might include setup of initial conditions, storage of intermediate results or solution, grid refinement, etc.<br><br>For iterating over arrays Basilisk provides a foreach()loop extending the C-language.<br><br>A standard Makefile is provided by Basilisk for managing common workflows.<br><br>Check the tips.","category":"page"},{"location":"Teaching/Basilisk/Tutorials/#Game-of-life","page":"-","title":"Game of life","text":"","category":"section"},{"location":"Teaching/Basilisk/Tutorials/","page":"-","title":"-","text":"Reference Conway’s game of life\nCode 02-Game-of-life\nNotes A simple implementation of Conway's game of life to get used with syntax.","category":"page"},{"location":"Teaching/Basilisk/Tutorials/#Brusselator","page":"-","title":"Brusselator","text":"","category":"section"},{"location":"Teaching/Basilisk/Tutorials/","page":"-","title":"-","text":"Reference Coupled reaction-diffusion equations\nCode 03-Brusselator\nNotes Solves the 2D Brusselator, a theoretical autocatalytic reaction diffusion system. The set of parameters used in the study for the stable Turin points where the ones proposed by [[@Pena2001a]] Interesting material for preparing courses extending this to other oscillating systems can be found here.","category":"page"},{"location":"Teaching/Basilisk/Tutorials/#Ginzburg-Landau","page":"-","title":"Ginzburg-Landau","text":"","category":"section"},{"location":"Teaching/Basilisk/Tutorials/","page":"-","title":"-","text":"Reference The complex Ginzburg-Landau equation\nCode 04-Ginzburg-Landau\nNotes Solves the complex Ginzburg-Landau equation describing the nonlinear evolution of disturbances near the transition from a stable to unstable state of a system. Additional materials are provided here. It would be a good project to include the term alpha in the equation and the Laplacian term that goes with it.","category":"page"},{"location":"Teaching/Basilisk/Tutorials/#Distance-field","page":"-","title":"Distance field","text":"","category":"section"},{"location":"Teaching/Basilisk/Tutorials/","page":"-","title":"-","text":"Reference Distance field computation from a 3D model\nCode 05-Distance-Field\nNotes This can be seen as a particular case of pre-/post-processing. It can prove useful when initializing domains with scanned surfaces in STL or other compatible format. Additional steps must be taken for compilation with rendering (modifications to Makefile). Iteration over dimensions can be done with foreach_dimension().","category":"page"},{"location":"Teaching/Basilisk/Tutorials/#Wavelet-transform","page":"-","title":"Wavelet transform","text":"","category":"section"},{"location":"Teaching/Basilisk/Tutorials/","page":"-","title":"-","text":"Reference Wavelet transforms and filtering\nCode 06-Wavelet-Transform\nNotes Provides a tutorial on wavelet transform and associated filters. It is presented as the basis to understand mesh adaptation in Basilisk. Recommended reading of [[@Sweldens1998a]].","category":"page"},{"location":"Teaching/Basilisk/Tutorials/#Navier-Stokes-equation","page":"-","title":"Navier-Stokes equation","text":"","category":"section"},{"location":"Teaching/Basilisk/Tutorials/#Decaying-turbulence","page":"-","title":"Decaying turbulence","text":"","category":"section"},{"location":"Teaching/Basilisk/Tutorials/","page":"-","title":"-","text":"Reference Decaying two-dimensional turbulence\nCode 07-Decaying-Turbulence\nNotes For solving Euler equation with vorticity-stream formulation one uses header file navier-stokes/stream.h. The examples makes a first usage of dimensional quantities for vorticity initialization.","category":"page"},{"location":"Teaching/Basilisk/Tutorials/#Vortex-street","page":"-","title":"Vortex street","text":"","category":"section"},{"location":"Teaching/Basilisk/Tutorials/","page":"-","title":"-","text":"Reference Bénard–von Kármán Vortex Street for flow around a cylinder\nCode 08-Vortex-Street\nNotes Solves the flow around a solid object using the navier-stokes/centered.h solver and introduced the use of passive scalars (tracer). Notice we modify L0, which among many other magic variables is defined in common.h. Illustrates the use of solid and intersection to accomplish complex domains.","category":"page"},{"location":"Teaching/Basilisk/Tutorials/#Vortex-shedding","page":"-","title":"Vortex shedding","text":"","category":"section"},{"location":"Teaching/Basilisk/Tutorials/","page":"-","title":"-","text":"Reference Vortex shedding behind a sphere\nCode 09-Vortex-Shedding\nNotes For lambda2.h see Jeong ([[@Jeong1995a]])","category":"page"},{"location":"Teaching/Basilisk/Tutorials/#Porous-medium","page":"-","title":"Porous medium","text":"","category":"section"},{"location":"Teaching/Basilisk/Tutorials/","page":"-","title":"-","text":"Reference Stokes flow through a complex 3D porous medium\nCode 10-Porous-Medium\nNotes ","category":"page"},{"location":"Teaching/Basilisk/Tutorials/#Periodic-box","page":"-","title":"Periodic box","text":"","category":"section"},{"location":"Teaching/Basilisk/Tutorials/","page":"-","title":"-","text":"Reference Forced isotropic turbulence in a triply-periodic box\nCode 11-Periodic-Box\nNotes ","category":"page"},{"location":"Teaching/Basilisk/Tutorials/#Two-phase-flows","page":"-","title":"Two-phase flows","text":"","category":"section"},{"location":"Teaching/Basilisk/Tutorials/#Pulsed-atomization","page":"-","title":"Pulsed atomization","text":"","category":"section"},{"location":"Teaching/Basilisk/Tutorials/","page":"-","title":"-","text":"Reference Atomisation of a pulsed liquid jet\nCode 12-Pulsed-Atomisation\nNotes ","category":"page"},{"location":"Teaching/Basilisk/Tutorials/#Bubble-rising","page":"-","title":"Bubble rising","text":"","category":"section"},{"location":"Teaching/Basilisk/Tutorials/","page":"-","title":"-","text":"Reference Bubble rising in a large tank\nCode 13-Bubble-Rising\nNotes ","category":"page"},{"location":"Teaching/Basilisk/Tutorials/#Rotating-cylinder","page":"-","title":"Rotating cylinder","text":"","category":"section"},{"location":"Teaching/Basilisk/Tutorials/","page":"-","title":"-","text":"Reference Flow in a rotating bottom-driven cylindrical container\nCode 14-Rotating-Cylinder\nNotes ","category":"page"},{"location":"Teaching/Basilisk/Tutorials/#Moving-Tangaroa","page":"-","title":"Moving Tangaroa","text":"","category":"section"},{"location":"Teaching/Basilisk/Tutorials/","page":"-","title":"-","text":"Reference Two-phase flow around RV Tangaroa\nCode 15-Moving-Tangaroa\nNotes ","category":"page"},{"location":"Teaching/Basilisk/Tutorials/#Geophysical-applications","page":"-","title":"Geophysical applications","text":"","category":"section"},{"location":"Teaching/Basilisk/Tutorials/#Indian-Tsunami","page":"-","title":"Indian Tsunami","text":"","category":"section"},{"location":"Teaching/Basilisk/Tutorials/","page":"-","title":"-","text":"Reference The 2004 Indian Ocean tsunami\nCode 16-Indian-Tsunami\nNotes ","category":"page"},{"location":"Teaching/Basilisk/Tutorials/#Tohoku-Tsunami","page":"-","title":"Tohoku Tsunami","text":"","category":"section"},{"location":"Teaching/Basilisk/Tutorials/","page":"-","title":"-","text":"Reference The 2011 Tohoku tsunami\nCode 17-Tohoku-Tsunami\nNotes ","category":"page"},{"location":"Teaching/Basilisk/Tutorials/#Train-of-Solitons","page":"-","title":"Train of Solitons","text":"","category":"section"},{"location":"Teaching/Basilisk/Tutorials/","page":"-","title":"-","text":"Reference Breakup of a rectangular perturbation into a train of solitons\nCode 18-Train-of-Solitons\nNotes ","category":"page"},{"location":"Teaching/Basilisk/Tutorials/#Lee-Waves","page":"-","title":"Lee Waves","text":"","category":"section"},{"location":"Teaching/Basilisk/Tutorials/","page":"-","title":"-","text":"Reference Tidally-induced internal lee waves\nCode 19-Lee-Waves\nNotes ","category":"page"},{"location":"Teaching/Basilisk/Tutorials/#Ellipsoidal-Shoal","page":"-","title":"Ellipsoidal Shoal","text":"","category":"section"},{"location":"Teaching/Basilisk/Tutorials/","page":"-","title":"-","text":"Reference Periodic wave propagation over an ellipsoidal shoal\nCode 20-Ellipsoidal-Shoal\nNotes ","category":"page"},{"location":"Teaching/Basilisk/Tutorials/#Ellipsoidal-Shoal-Multilayer","page":"-","title":"Ellipsoidal Shoal Multilayer","text":"","category":"section"},{"location":"Teaching/Basilisk/Tutorials/","page":"-","title":"-","text":"Reference Periodic wave propagation over an ellipsoidal shoal (multilayer)\nCode 21-Ellipsoidal-Shoal-Multilayer\nNotes Check for source code in current version.","category":"page"},{"location":"Teaching/Basilisk/Tutorials/#Stokes-Wave","page":"-","title":"Stokes Wave","text":"","category":"section"},{"location":"Teaching/Basilisk/Tutorials/","page":"-","title":"-","text":"Reference 3D breaking Stokes wave (multilayer solver)\nCode 22-Stokes-Wave\nNotes ","category":"page"},{"location":"Teaching/Basilisk/Tutorials/#Transcritical-Flow","page":"-","title":"Transcritical Flow","text":"","category":"section"},{"location":"Teaching/Basilisk/Tutorials/","page":"-","title":"-","text":"Reference Transcritical flow over a bump\nCode 23-Transcritical-Flow\nNotes ","category":"page"},{"location":"Teaching/Basilisk/Tutorials/#Shock-Instability","page":"-","title":"Shock Instability","text":"","category":"section"},{"location":"Teaching/Basilisk/Tutorials/","page":"-","title":"-","text":"Reference A Shallow Water Analogue for the Standing Accretion Shock Instability\nCode 24-Shock-Instability\nNotes ","category":"page"},{"location":"Teaching/Basilisk/Tutorials/#Python-interface","page":"-","title":"Python interface","text":"","category":"section"},{"location":"Teaching/Basilisk/Tutorials/#Basic-usage","page":"-","title":"Basic usage","text":"","category":"section"},{"location":"Teaching/Basilisk/Tutorials/","page":"-","title":"-","text":"Reference Python interface\nCode 25-Python-Interface\nNotes ","category":"page"},{"location":"Teaching/Basilisk/Tutorials/#Poisson-equation","page":"-","title":"Poisson equation","text":"","category":"section"},{"location":"Teaching/Basilisk/Tutorials/","page":"-","title":"-","text":"Reference Poisson problem with Python\nCode 26-Python-Poisson\nNotes ","category":"page"},{"location":"Cantera/#Cantera","page":"Cantera","title":"Cantera","text":"","category":"section"},{"location":"Cantera/","page":"Cantera","title":"Cantera","text":"This page documents the wrapper written around the C-API of Cantera. The status of development is documented here. Its goal is not to mimic the original API or provide an interface equivalent to the Python package, but something in line with the functioning of the parent toolbox.","category":"page"},{"location":"Cantera/#Status-of-Cantera-wrapper","page":"Cantera","title":"Status of Cantera wrapper","text":"","category":"section"},{"location":"Cantera/","page":"Cantera","title":"Cantera","text":"This is an experimental interface to Cantera library based on its C-API version 3.0. This interface is at its early days and has developped for Julia >= 1.9.0 under Windows 10/11. When it is stable enough it will be published as a package and tested under other platforms.","category":"page"},{"location":"Cantera/#Useful-links","page":"Cantera","title":"Useful links","text":"","category":"section"},{"location":"Cantera/","page":"Cantera","title":"Cantera","text":"Source files\nHeader files","category":"page"},{"location":"Cantera/#API-of-ct.h","page":"Cantera","title":"API of ct.h","text":"","category":"section"},{"location":"Cantera/","page":"Cantera","title":"Cantera","text":"Documentation here.","category":"page"},{"location":"Cantera/","page":"Cantera","title":"Cantera","text":"Status Header Function Module\nTested ct.h ct_appdelete inlined\nStruct ct.h soln_newSolution wrapped\n ct.h soln_newInterface waitlist\nTested ct.h soln_del inlined\nTested ct.h soln_name inlined\nStruct ct.h soln_thermo inlined\nStruct ct.h soln_kinetics inlined\nStruct ct.h soln_transport inlined\nTested ct.h soln_setTransportModel wrapped\nTested ct.h soln_nAdjacent inlined\n ct.h soln_adjacent waitlist\nTested ct.h thermo_newFromFile wrapped\nTested ct.h thermo_del inlined\nStruct ct.h thermo_nElements inlined\nStruct ct.h thermo_nSpecies inlined\nTested ct.h thermo_temperature inlined\nStruct ct.h thermo_setTemperature inlined\nTested ct.h thermo_density inlined\nTested ct.h thermo_setDensity inlined\nTested ct.h thermo_molarDensity inlined\nTested ct.h thermo_setMolarDensity inlined\nTested ct.h thermo_meanMolecularWeight inlined\nTested ct.h thermo_moleFraction inlined\nTested ct.h thermo_massFraction inlined\nStruct ct.h thermo_getMoleFractions inlined\nTested ct.h thermo_getMassFractions inlined\nStruct ct.h thermo_setMoleFractions inlined\nTested ct.h thermo_setMassFractions inlined\n ct.h thermo_setMoleFractionsByName \n ct.h thermo_setMassFractionsByName \n ct.h thermo_getAtomicWeights \n ct.h thermo_getMolecularWeights \n ct.h thermo_getCharges \n ct.h thermo_getElementName \n ct.h thermo_getSpeciesName \n ct.h thermo_getName \n ct.h thermo_setName \n ct.h thermo_elementIndex \n ct.h thermo_speciesIndex \n ct.h thermo_report \nTested ct.h thermo_print \n ct.h thermo_nAtoms \n ct.h thermo_addElement \n ct.h thermo_getEosType \nTo test ct.h thermo_refPressure inlined\nTo test ct.h thermo_minTemp inlined\nTo test ct.h thermo_maxTemp inlined\nTo test ct.h thermoenthalpymole inlined\nTo test ct.h thermointEnergymole inlined\nTo test ct.h thermoentropymole inlined\nTo test ct.h thermogibbsmole inlined\nTo test ct.h thermocpmole inlined\nTo test ct.h thermocvmole inlined\nTo test ct.h thermo_pressure inlined\nStruct ct.h thermo_setPressure inlined\nTo test ct.h thermoenthalpymass inlined\nTo test ct.h thermointEnergymass inlined\nTo test ct.h thermoentropymass inlined\nTo test ct.h thermogibbsmass inlined\nTo test ct.h thermocpmass inlined\nTo test ct.h thermocvmass inlined\nTo test ct.h thermo_electricPotential inlined\nTo test ct.h thermo_thermalExpansionCoeff inlined\nTo test ct.h thermo_isothermalCompressibility inlined\n ct.h thermo_chemPotentials \n ct.h thermogetEnthalpiesRT \n ct.h thermogetEntropiesR \n ct.h thermogetCpR \n ct.h thermo_setElectricPotential \n ct.h thermosetTP \n ct.h thermosetTD \n ct.h thermosetRP \n ct.h thermosetDP \n ct.h thermosetHP \n ct.h thermosetUV \n ct.h thermosetSV \n ct.h thermosetSP \n ct.h thermosetST \n ct.h thermosetTV \n ct.h thermosetPV \n ct.h thermosetUP \n ct.h thermosetVH \n ct.h thermosetTH \n ct.h thermosetSH \nTested ct.h thermo_equilibrate \nTo test ct.h thermo_critTemperature inlined\nTo test ct.h thermo_critPressure inlined\nTo test ct.h thermo_critDensity inlined\nTo test ct.h thermo_vaporFraction inlined\n ct.h thermo_satTemperature \n ct.h thermo_satPressure \n ct.h thermosetStatePsat \n ct.h thermosetStateTsat \n ct.h kin_newFromFile \nTo test ct.h kin_del inlined\nTo test ct.h kin_nSpecies inlined\nTo test ct.h kin_nReactions inlined\nTo test ct.h kin_nPhases inlined\n ct.h kin_phaseIndex \nTo test ct.h kin_reactionPhaseIndex inlined\n ct.h kin_reactantStoichCoeff \n ct.h kin_productStoichCoeff \n ct.h kin_getReactionType \n ct.h kin_getFwdRatesOfProgress \n ct.h kin_getRevRatesOfProgress \n ct.h kin_getNetRatesOfProgress \n ct.h kin_getEquilibriumConstants \n ct.h kin_getFwdRateConstants \n ct.h kin_getRevRateConstants \n ct.h kin_getDelta \n ct.h kin_getCreationRates \n ct.h kin_getDestructionRates \n ct.h kin_getNetProductionRates \n ct.h kin_getSourceTerms \nTo test ct.h kin_multiplier inlined\n ct.h kin_getReactionString \n ct.h kin_setMultiplier \nTo test ct.h kin_isReversible inlined\n ct.h kin_getType \nTo test ct.h kin_start inlined\n ct.h kin_speciesIndex \nTo test ct.h kin_advanceCoverages inlined\nTo test ct.h kin_phase inlined\nTo test ct.h trans_newDefault inlined\n ct.h trans_new \nTo test ct.h trans_del inlined\nTo test ct.h trans_transportModel inlined\nTo test ct.h trans_viscosity inlined\nTo test ct.h trans_electricalConductivity inlined\n ct.h trans_thermalConductivity \n ct.h trans_getThermalDiffCoeffs \n ct.h trans_getMixDiffCoeffs \n ct.h trans_getBinDiffCoeffs \n ct.h trans_getMultiDiffCoeffs \n ct.h trans_setParameters \n ct.h trans_getMolarFluxes \n ct.h trans_getMassFluxes \n ct.h ct_getCanteraError \n ct.h ct_setLogWriter \n ct.h ct_setLogCallback \n ct.h ct_addCanteraDirectory \n ct.h ct_getDataDirectories \n ct.h ct_getCanteraVersion \n ct.h ct_getGitCommit \nTested ct.h ctsuppressthermo_warnings inlined\nTested ct.h ctuselegacyrateconstants inlined\nTested ct.h ct_clearStorage inlined\nTested ct.h ct_resetStorage inlined","category":"page"},{"location":"Cantera/#API-of-ctfunc.h","page":"Cantera","title":"API of ctfunc.h","text":"","category":"section"},{"location":"Cantera/","page":"Cantera","title":"Cantera","text":"Documentation here.","category":"page"},{"location":"Cantera/","page":"Cantera","title":"Cantera","text":"Status Header Function Module\n ctfunc.h func_new \n ctfunc.h funcnewbasic \n ctfunc.h funcnewadvanced \n ctfunc.h funcnewcompound \n ctfunc.h funcnewmodified \nTo test ctfunc.h func_del inlined\n ctfunc.h func_type \nTo test ctfunc.h func_value inlined\nTo test ctfunc.h func_derivative inlined\nTo test ctfunc.h func_duplicate inlined\n ctfunc.h func_write \nTo test ctfunc.h ct_clearFunc inlined","category":"page"},{"location":"Cantera/#API-of-ctmultiphase.h","page":"Cantera","title":"API of ctmultiphase.h","text":"","category":"section"},{"location":"Cantera/","page":"Cantera","title":"Cantera","text":"Documentation here.","category":"page"},{"location":"Cantera/","page":"Cantera","title":"Cantera","text":"Status Header Function Module\nTo test ctmultiphase.h mix_new inlined\nTo test ctmultiphase.h mix_del inlined\nTo test ctmultiphase.h ct_clearMix inlined\n ctmultiphase.h mix_addPhase \nTo test ctmultiphase.h mix_init inlined\nTo test ctmultiphase.h mix_updatePhases inlined\nTo test ctmultiphase.h mix_nElements inlined\n ctmultiphase.h mix_elementIndex \n ctmultiphase.h mix_speciesIndex \nTo test ctmultiphase.h mix_nSpecies inlined\nTo test ctmultiphase.h mix_setTemperature inlined\nTo test ctmultiphase.h mix_temperature inlined\nTo test ctmultiphase.h mix_minTemp inlined\nTo test ctmultiphase.h mix_maxTemp inlined\nTo test ctmultiphase.h mix_charge inlined\nTo test ctmultiphase.h mix_phaseCharge inlined\nTo test ctmultiphase.h mix_setPressure inlined\nTo test ctmultiphase.h mix_pressure inlined\nTo test ctmultiphase.h mix_nAtoms inlined\nTo test ctmultiphase.h mix_nPhases inlined\nTo test ctmultiphase.h mix_phaseMoles inlined\n ctmultiphase.h mix_setPhaseMoles \n ctmultiphase.h mix_setMoles \n ctmultiphase.h mix_setMolesByName \nTo test ctmultiphase.h mix_speciesMoles inlined\nTo test ctmultiphase.h mix_elementMoles inlined\n ctmultiphase.h mix_equilibrate \n ctmultiphase.h mix_getChemPotentials \nTo test ctmultiphase.h mix_enthalpy inlined\nTo test ctmultiphase.h mix_entropy inlined\nTo test ctmultiphase.h mix_gibbs inlined\nTo test ctmultiphase.h mix_cp inlined\nTo test ctmultiphase.h mix_volume inlined\nTo test ctmultiphase.h mix_speciesPhaseIndex inlined\nTo test ctmultiphase.h mix_moleFraction inlined","category":"page"},{"location":"Cantera/#API-of-ctonedim.h","page":"Cantera","title":"API of ctonedim.h","text":"","category":"section"},{"location":"Cantera/","page":"Cantera","title":"Cantera","text":"Documentation here.","category":"page"},{"location":"Cantera/","page":"Cantera","title":"Cantera","text":"Status Header Function Module\nTo test ctonedim.h ct_clearOneDim inlined\n ctonedim.h domain_new \nTo test ctonedim.h domain_del inlined\nTo test ctonedim.h domain_type inlined\n ctonedim.h domain_type3 \nTo test ctonedim.h domain_index inlined\nTo test ctonedim.h domain_nComponents inlined\nTo test ctonedim.h domain_nPoints inlined\n ctonedim.h domain_componentName \n ctonedim.h domain_componentIndex \n ctonedim.h domain_setBounds \nTo test ctonedim.h domain_lowerBound inlined\nTo test ctonedim.h domain_upperBound inlined\n ctonedim.h domain_setSteadyTolerances \n ctonedim.h domain_setTransientTolerances \nTo test ctonedim.h domain_rtol inlined\nTo test ctonedim.h domain_atol inlined\n ctonedim.h domain_setupGrid \n ctonedim.h domain_setID \nTo test ctonedim.h domain_grid inlined\nTo test ctonedim.h bdry_setMdot inlined\nTo test ctonedim.h bdry_setTemperature inlined\nTo test ctonedim.h bdry_setSpreadRate inlined\n ctonedim.h bdry_setMoleFractions \nTo test ctonedim.h bdry_temperature inlined\nTo test ctonedim.h bdry_spreadRate inlined\nTo test ctonedim.h bdry_massFraction inlined\nTo test ctonedim.h bdry_mdot inlined\nTo test ctonedim.h reactingsurf_setkineticsmgr inlined\nTo test ctonedim.h reactingsurf_enableCoverageEqs inlined\nTo test ctonedim.h inlet_new inlined\nTo test ctonedim.h outlet_new inlined\nTo test ctonedim.h outletres_new inlined\nTo test ctonedim.h symm_new inlined\nTo test ctonedim.h surf_new inlined\nTo test ctonedim.h reactingsurf_new inlined\nTo test ctonedim.h inlet_setSpreadRate inlined\n ctonedim.h stflow_new \nTo test ctonedim.h stflow_setTransport inlined\nTo test ctonedim.h stflow_enableSoret inlined\nTo test ctonedim.h stflow_setPressure inlined\nTo test ctonedim.h stflow_pressure inlined\n ctonedim.h stflow_setFixedTempProfile \nTo test ctonedim.h stflow_solveEnergyEqn inlined\n ctonedim.h sim1D_new \nTo test ctonedim.h sim1D_del inlined\n ctonedim.h sim1D_setValue \n ctonedim.h sim1D_setProfile \n ctonedim.h sim1D_setFlatProfile \n ctonedim.h sim1D_show \n ctonedim.h sim1D_showSolution \n ctonedim.h sim1D_setTimeStep \nTo test ctonedim.h sim1D_getInitialSoln inlined\n ctonedim.h sim1D_solve \nTo test ctonedim.h sim1D_refine inlined\n ctonedim.h sim1D_setRefineCriteria \n ctonedim.h sim1D_setGridMin \n ctonedim.h sim1D_save \n ctonedim.h sim1D_restore \nTo test ctonedim.h sim1D_writeStats inlined\n ctonedim.h sim1D_domainIndex \n ctonedim.h sim1D_value \n ctonedim.h sim1D_workValue \nTo test ctonedim.h sim1D_eval inlined\nTo test ctonedim.h sim1D_setMaxJacAge inlined\nTo test ctonedim.h sim1D_setFixedTemperature inlined","category":"page"},{"location":"Cantera/#API-of-ctreactor.h","page":"Cantera","title":"API of ctreactor.h","text":"","category":"section"},{"location":"Cantera/","page":"Cantera","title":"Cantera","text":"Documentation here.","category":"page"},{"location":"Cantera/","page":"Cantera","title":"Cantera","text":"Status Header Function Module\n ctreactor.h reactor_new \nTo test ctreactor.h reactor_del inlined\nTo test ctreactor.h reactor_setInitialVolume inlined\nTo test ctreactor.h reactor_setChemistry inlined\nTo test ctreactor.h reactor_setEnergy inlined\nTo test ctreactor.h reactor_setThermoMgr inlined\nTo test ctreactor.h reactor_setKineticsMgr inlined\nTo test ctreactor.h reactor_insert inlined\nTo test ctreactor.h reactor_mass inlined\nTo test ctreactor.h reactor_volume inlined\nTo test ctreactor.h reactor_density inlined\nTo test ctreactor.h reactor_temperature inlined\nTo test ctreactor.h reactorenthalpymass inlined\nTo test ctreactor.h reactorintEnergymass inlined\nTo test ctreactor.h reactor_pressure inlined\nTo test ctreactor.h reactor_massFraction inlined\nTo test ctreactor.h reactor_nSensParams inlined\nTo test ctreactor.h reactor_addSensitivityReaction inlined\nTo test ctreactor.h flowReactor_setMassFlowRate inlined\nTo test ctreactor.h reactornet_new inlined\nTo test ctreactor.h reactornet_del inlined\nTo test ctreactor.h reactornet_setInitialTime inlined\nTo test ctreactor.h reactornet_setMaxTimeStep inlined\nTo test ctreactor.h reactornet_setTolerances inlined\nTo test ctreactor.h reactornet_setSensitivityTolerances inlined\nTo test ctreactor.h reactornet_addreactor inlined\nTo test ctreactor.h reactornet_advance inlined\nTo test ctreactor.h reactornet_step inlined\nTo test ctreactor.h reactornet_time inlined\nTo test ctreactor.h reactornet_rtol inlined\nTo test ctreactor.h reactornet_atol inlined\n ctreactor.h reactornet_sensitivity \n ctreactor.h flowdev_new \nTo test ctreactor.h flowdev_del inlined\nTo test ctreactor.h flowdev_install inlined\nTo test ctreactor.h flowdev_setMaster inlined\nTo test ctreactor.h flowdev_setPrimary inlined\nTo test ctreactor.h flowdev_massFlowRate inlined\nTo test ctreactor.h flowdev_setMassFlowCoeff inlined\nTo test ctreactor.h flowdev_setValveCoeff inlined\nTo test ctreactor.h flowdev_setPressureCoeff inlined\nTo test ctreactor.h flowdev_setPressureFunction inlined\nTo test ctreactor.h flowdev_setTimeFunction inlined\n ctreactor.h wall_new \nTo test ctreactor.h wall_del inlined\nTo test ctreactor.h wall_install inlined\nTo test ctreactor.h wall_vdot inlined\nTo test ctreactor.h wall_expansionRate inlined\nTo test ctreactor.h wall_Q inlined\nTo test ctreactor.h wall_heatRate inlined\nTo test ctreactor.h wall_area inlined\nTo test ctreactor.h wall_setArea inlined\nTo test ctreactor.h wall_setThermalResistance inlined\nTo test ctreactor.h wall_setHeatTransferCoeff inlined\nTo test ctreactor.h wall_setHeatFlux inlined\nTo test ctreactor.h wall_setExpansionRateCoeff inlined\nTo test ctreactor.h wall_setVelocity inlined\nTo test ctreactor.h wall_setEmissivity inlined\nTo test ctreactor.h wall_ready inlined\nTo test ctreactor.h reactorsurface_new inlined\nTo test ctreactor.h reactorsurface_del inlined\nTo test ctreactor.h reactorsurface_install inlined\nTo test ctreactor.h reactorsurface_setkinetics inlined\nTo test ctreactor.h reactorsurface_area inlined\nTo test ctreactor.h reactorsurface_setArea inlined\nTo test ctreactor.h reactorsurface_addSensitivityReaction inlined\nTo test ctreactor.h ct_clearReactors inlined","category":"page"},{"location":"Cantera/#API-of-ctrpath.h","page":"Cantera","title":"API of ctrpath.h","text":"","category":"section"},{"location":"Cantera/","page":"Cantera","title":"Cantera","text":"Documentation here.","category":"page"},{"location":"Cantera/","page":"Cantera","title":"Cantera","text":"Status Header Function Module\nTo test ctrpath.h rdiag_new inlined\nTo test ctrpath.h rdiag_del inlined\nTo test ctrpath.h rdiag_detailed inlined\nTo test ctrpath.h rdiag_brief inlined\nTo test ctrpath.h rdiag_setThreshold inlined\n ctrpath.h rdiag_setBoldColor \n ctrpath.h rdiag_setNormalColor \n ctrpath.h rdiag_setDashedColor \n ctrpath.h rdiag_setDotOptions \nTo test ctrpath.h rdiag_setBoldThreshold inlined\nTo test ctrpath.h rdiag_setNormalThreshold inlined\nTo test ctrpath.h rdiag_setLabelThreshold inlined\nTo test ctrpath.h rdiag_setScale inlined\nTo test ctrpath.h rdiag_setFlowType inlined\nTo test ctrpath.h rdiag_setArrowWidth inlined\n ctrpath.h rdiag_setTitle \n ctrpath.h rdiag_write \nTo test ctrpath.h rdiag_add inlined\n ctrpath.h rdiag_findMajor \n ctrpath.h rdiag_setFont \nTo test ctrpath.h rdiag_displayOnly inlined\nTo test ctrpath.h rbuild_new inlined\nTo test ctrpath.h rbuild_del inlined\n ctrpath.h rbuild_init \n ctrpath.h rbuild_build \nTo test ctrpath.h ct_clearReactionPath inlined","category":"page"},{"location":"Cantera/#API-of-ctsurf.h","page":"Cantera","title":"API of ctsurf.h","text":"","category":"section"},{"location":"Cantera/","page":"Cantera","title":"Cantera","text":"Documentation here.","category":"page"},{"location":"Cantera/","page":"Cantera","title":"Cantera","text":"Status Header Function Module\n ctsurf.h surf_setCoverages \n ctsurf.h surf_getCoverages \n ctsurf.h surf_setConcentrations \n ctsurf.h surf_getConcentrations \nTo test ctsurf.h surf_setSiteDensity inlined\nTo test ctsurf.h surf_siteDensity inlined\n ctsurf.h surf_setCoveragesByName ","category":"page"},{"location":"#WallyToolbox","page":"Home","title":"WallyToolbox","text":"","category":"section"},{"location":"DryGranular/kramers/#Kramers'-model","page":"Kramers' model","title":"Kramers' model","text":"","category":"section"},{"location":"DryGranular/kramers/","page":"Kramers' model","title":"Kramers' model","text":"using CairoMakie\nusing CSV\nusing DataFrames\nusing Latexify\nusing Printf\nusing DryGranular\n\n\"Partial data from Kramers (1952) Table 3\"\nconst DATA_TABLE3 = \"\"\"\\\nρ,γ,tan(β),n,ṁ,prod_dimless,η̄ᵣ,hold_real\n1480.0,36.0,0.0094,0.059,5.15e-03,18.3,0.111,8.10\n1480.0,36.0,0.0094,0.090,2.68e-03,6.25,0.054,5.00\n1480.0,36.0,0.0094,0.195,1.32e-02,14.2,0.088,7.75\n1480.0,36.0,0.0094,0.232,7.24e-03,6.55,0.043,3.85\n1480.0,36.0,0.0100,0.040,6.38e-03,29.7,0.169,13.3\n1480.0,36.0,0.0100,0.040,5.00e-03,23.2,0.144,11.2\n1480.0,36.0,0.0100,0.069,9.20e-03,24.8,0.150,10.6\n1480.0,36.0,0.0100,0.069,6.53e-03,17.6,0.113,8.50\n1480.0,36.0,0.0100,0.106,1.50e-02,27.8,0.162,12.2\n1480.0,36.0,0.0100,0.159,1.20e-02,14.0,0.092,7.49\n1480.0,36.0,0.0100,0.238,1.55e-02,12.1,0.083,7.48\n1480.0,36.0,0.0100,0.238,1.19e-02,9.22,0.068,6.13\n\"\"\"\n\n\"Compares approximate analytical to numerical solution.\"\nfunction solvekiln(; L, D, Φ, ω, β, γ, d, show = true)\n    model = RotaryKilnBedSolution(;\n        model = SymbolicLinearKramersModel(),\n        L     = L,\n        R     = D / 2.0,\n        Φ     = Φ / 3600.0,\n        ω     = ω / 60.0,\n        β     = deg2rad(β),\n        γ     = deg2rad(γ),\n        d     = d / 1000.0\n    )\n\n    optim = kramersnlapprox(;\n        z = model.z,\n        R = D / 2.0,\n        Φ = Φ / 3600.0,\n        ω = ω / 60.0,\n        β = deg2rad(β),\n        γ = deg2rad(γ),\n        d = d / 1000.0\n    )\n\n    f = nothing\n    ax = nothing\n\n    if show\n        f = Figure()\n        ax = Axis(f[1, 1])\n\n        lines!(ax, 100model.z/L, 100model.h, linewidth = 3, label = \"Numerical\")\n        lines!(ax, 100optim.z/L, 100optim.h, linewidth = 3, label = \"Analytical\")\n\n        a = @sprintf(\"%.1f\", model.ηₘ)\n        b = @sprintf(\"%.1f\", optim.ηₘ)\n        title = \"Loading: $(a)% (numerical) | $(b)% (analytical)\"\n\n        ax.title = title\n        ax.xlabel = \"Coordinate [%]\"\n        ax.ylabel = \"Bed height [cm]\"\n        ax.xticks = 0.0:20.0:100.0\n        xlims!(ax, extrema(ax.xticks.val))\n    end\n\n    return model, optim, f, ax\nend\n\n\"Reference case for alumina kiln testing.\"\nfunction aluminakiln(ṁ, ω; show = false)\n    # Density of bed [kg/m³]\n    ρ = 800.0\n    L = 34.0\n    D = 1.5\n    β = atan(0.025)\n\n    model, optim, f, ax = solvekiln(\n        L = L,\n        D = D,\n        Φ = (1000// 24) * ṁ / ρ,\n        ω = ω,\n        β = rad2deg(β),\n        γ = 33.0,\n        d = 0.050,\n        show = show\n    )\n\n    τₚ = perrayresidence(L, ω, D, β)\n\n    return model, optim, f, ax, τₚ\nend\n\n\"Run `aluminakiln` against some known conditions.\"\nfunction scanaluminakiln()\n    ṁlist = [33.6, 43.2]\n    ωlist = [0.85, 1.20]\n\n    df = DataFrame(\n        ṁ = Float64[],\n        ω = Float64[],\n        η̄ = Float64[],\n        τᵢ = Float64[],\n        τₚ = Float64[]\n    )\n\n    for ṁ ∈ ṁlist, ω ∈ ωlist\n        model, _, _, _, τ = aluminakiln(ṁ, ω, show = false)\n        η̄ = round(model.ηₘ, digits = 0)\n        τᵢ = round(model.τ / 60.0, digits = 0)\n        τₚ = round(τ, digits = 0)\n        push!(df, [ṁ ω η̄ τᵢ τₚ])\n    end\n\n    return df\nend\n\nlet\n    # @info(\"Solution of reference case\")\n\n    in1_to_m1(v) = 0.0254 * v\n    ft1_to_m1(v) = in1_to_m1(12.0) * v\n    ft3_to_m3(v) = ft1_to_m1(1.0)^3 * v\n\n    # Kiln length [m]\n    L = ft1_to_m1(45.0)\n\n    # Kiln diameter [m]\n    D = 2 * ft1_to_m1(3.1)\n\n    # Volume flow rate [m³/h]\n    Φ = ft3_to_m3(6.1) * 60\n\n    # Rotation rate (+0.0005) [rev/min]\n    ω = 0.0505 * 60.0\n\n    # Kiln slope (0.5in/ft) [°]\n    β = rad2deg(atan(0.5 / 12))\n\n    # Repose angle [°]\n    γ = 45.0\n\n    # Particle size [mm]\n    d = 0.050\n\n    # Conversions to match model inputs.\n    R = D / 2.0\n    Φ = Φ / 3600.0\n    ω = ω / 60.0\n    β = deg2rad(β)\n    γ = deg2rad(γ)\n    d = d / 1000.0\n\n    # Create problem container.\n    kramers = RotaryKilnBedSolution(;\n        model = SymbolicLinearKramersModel(),\n        L     = L,\n        R     = R,\n        Φ     = Φ,\n        ω     = ω,\n        β     = β,\n        γ     = γ,\n        d     = d\n    )\n\n    optim = kramersnlapprox(;\n        z = kramers.z,\n        R = R,\n        Φ = Φ,\n        ω = ω,\n        β = β,\n        γ = γ,\n        d = d\n    )\n\n    global kramers_NΦ = dimlessNΦ(R, β, ω, Φ, γ)\n    global kramers_Nₖ = dimlessNₖ(L, R, β, γ)\n    global kramers_η̄ₛ = sullivansηₘ(R, β, ω, Φ, γ)\n    global kramers_ref = kramers\n    global optim_ref = optim\n\n    global RESULTS_TABLE = DataFrame(\n        Quantity  = [\n            \"NΦ\",\n            \"Nₖ\",\n            \"η̄ᵣ\",\n            \"η̄ᵢ\",\n        ],\n        Reference = [\n            \"1.15\",\n            \"1.17\",\n            \"5.65\",\n            @sprintf(\"%.2f\", optim_ref.ηₘ)\n        ],\n        Computed  = [\n            @sprintf(\"%.2f\", kramers_NΦ),\n            @sprintf(\"%.2f\", kramers_Nₖ),\n            @sprintf(\"%.2f\", kramers_η̄ₛ),\n            @sprintf(\"%.2f\", kramers_ref.ηₘ)\n        ]\n    )\nend\n\nconst TABLE3 = let\n    # @info(\"Verification of *Table 3*\")\n\n    Dₖ = 0.197\n    Lₖ = 1.780\n    dₖ = 0.0012\n\n    table3 = DataFrame(CSV.File(IOBuffer(DATA_TABLE3)))\n    table3[!, \"η̄ᵢ\"] = zeros(length(table3[!, \"η̄ᵣ\"]))\n    table3[!, \"η̄ᵣ\"] *= 100\n\n    model = SymbolicLinearKramersModel()\n\n    for (i, row) in enumerate(eachrow(table3))\n        Φ = 3600.0 * row[\"ṁ\"] / row[\"ρ\"]\n        ω = row[\"n\"] * 60.0\n        β = rad2deg(atan(row[\"tan(β)\"]))\n        γ = row[\"γ\"]\n\n        kramers = RotaryKilnBedSolution(;\n            model = model,\n            L     = Lₖ,\n            R     = Dₖ / 2.0,\n            Φ     = Φ / 3600.0,\n            ω     = ω / 60.0,\n            β     = deg2rad(β),\n            γ     = deg2rad(γ),\n            d     = dₖ / 1000.0\n        )\n\n        table3[i, \"η̄ᵢ\"] = round(kramers.ηₘ, digits = 1)\n    end\n\n    exclude = [\"ρ\", \"γ\", \"prod_dimless\", \"hold_real\"]\n    select(table3, Not(exclude))\nend\n\nconst DIMLESSPLOT = let\n    @info(\"Dimensionless profiles solution\")\n\n    ρ = 1480.0\n    L = 20.0\n    D = 0.197\n    Φ = 5.15e-03 / ρ * 3600\n    ω = 0.059 * 60\n    β = rad2deg(atan(0.0094))\n    γ = 36.0\n\n    # Conversions to match model inputs.\n    R = D / 2.0\n    Φ = Φ / 3600.0\n    ω = ω / 60.0\n    β = deg2rad(β)\n    γ = deg2rad(γ)\n\n    # Things held constant in loop.\n    NΦ = dimlessNΦ(R, β, ω, Φ, γ)\n    Nₖ = dimlessNₖ(L, R, β, γ)\n    model = SymbolicLinearKramersModel()\n\n    f = Figure()\n    ax = Axis(f[1, 1])\n\n    for d in [0.05, 0.10, 0.15, 0.193, 0.25]\n        kramers = RotaryKilnBedSolution(;\n            model = model,\n            L     = L,\n            R     = R,\n            Φ     = Φ,\n            ω     = ω,\n            β     = β,\n            γ     = γ,\n            d     = d * R * NΦ\n        )\n\n        # Dimensionless axes.\n        z = kramers.z\n        h = kramers.h / (R * NΦ)\n        z = @. (L - z) / L * 1 / (NΦ * Nₖ)\n        z = @. z[1] - z\n\n        label = @sprintf(\"%.3f\", d)\n        lines!(ax, z, h; linewidth = 2, label = label)\n    end\n\n    ax.title = \"Dimensionless loading curves\"\n    ax.xlabel = \"Coordinate\"\n    ax.ylabel = \"Bed height\"\n    ax.xticks.val = 0.0:0.1:0.5\n    ax.yticks.val = 0.05:0.05:0.25\n    xlims!(ax, extrema(ax.xticks.val))\n    ylims!(ax, extrema(ax.yticks.val))\n    axislegend(ax; position = :rb)\n\n    f\nend","category":"page"},{"location":"DryGranular/kramers/#Sample-reference-case","page":"Kramers' model","title":"Sample reference case","text":"","category":"section"},{"location":"DryGranular/kramers/","page":"Kramers' model","title":"Kramers' model","text":"Here we make use of the current implementation to check if it correctly approximates the last example provided in reference paper from [2]. To minimize rounding errors causes by unit conversions, we provide the required functions to convert from imperial to international system in the solution process.","category":"page"},{"location":"DryGranular/kramers/","page":"Kramers' model","title":"Kramers' model","text":"The next table summarizes the results. It is seen that the dimensionless numbers are well approximated. It must be emphasized that the reference estimates η̄ᵣ by a graphical method – it was 1952 – and the current value is considered a good enough approximation. Additionally, the equation was not integrated numerically as done here, but engineering relationships were used in the approximation. That said, the proper loading to be considered in our days is η̄ᵢ.","category":"page"},{"location":"DryGranular/kramers/","page":"Kramers' model","title":"Kramers' model","text":"mdtable(RESULTS_TABLE, latex=false) # hide","category":"page"},{"location":"DryGranular/kramers/","page":"Kramers' model","title":"Kramers' model","text":"Note: the last value in column Reference above is not provided in Kramers' paper but computed from the approximate analytical solution provided by the authors. As we see here, it may get >20% error under some circumstances.","category":"page"},{"location":"DryGranular/kramers/#Verification-of-*Table-3*","page":"Kramers' model","title":"Verification of Table 3","text":"","category":"section"},{"location":"DryGranular/kramers/","page":"Kramers' model","title":"Kramers' model","text":"In the next cell we provide the kiln dimensions used by Kramers (1952) to experimentally validate the model. Some data from their Tab. 3 is then loaded and all rows are simulated with current model. Fractional hold-up seems to be well correlated at least to a few percent of the reference value.","category":"page"},{"location":"DryGranular/kramers/","page":"Kramers' model","title":"Kramers' model","text":"mdtable(TABLE3, latex=false) # hide","category":"page"},{"location":"DryGranular/kramers/#Dimensionless-profiles","page":"Kramers' model","title":"Dimensionless profiles","text":"","category":"section"},{"location":"DryGranular/kramers/","page":"Kramers' model","title":"Kramers' model","text":"Next step in validation is to check profiles in dimensionless format, as done by Kramers in their Fig. 3. Notice that here we used the numerical integration curves instead of the analytical approximation of profiles, so reproduction and consequences of results are not exactly the same.","category":"page"},{"location":"DryGranular/kramers/","page":"Kramers' model","title":"Kramers' model","text":"DIMLESSPLOT # hide","category":"page"},{"location":"DryGranular/kramers/#Comparison-with-analytical","page":"Kramers' model","title":"Comparison with analytical","text":"","category":"section"},{"location":"DryGranular/kramers/","page":"Kramers' model","title":"Kramers' model","text":"The final step in model validation is to compare the approximate analytical solution proposed by Kramers and the results of numerical integration. It is worth mentioning that numerical integration remains the recommended method because one does not need to verify the ranges of validity of analytical approximation for every use case.","category":"page"},{"location":"DryGranular/kramers/","page":"Kramers' model","title":"Kramers' model","text":"let                                    # hide\n    _, _, f, ax = solvekiln(           # hide\n        L = 10.0,                      # hide\n        D = 1.0,                       # hide\n        Φ = 1.0,                       # hide\n        ω = 1.0,                       # hide\n        β = 3.0,                       # hide\n        γ = 45.0,                      # hide\n        d = 0.001                      # hide\n    )                                  # hide\n                                       # hide\n    ax.yticks = 0.0:4.0:20.0           # hide\n    ylims!(ax, extrema(ax.yticks.val)) # hide\n    f                                  # hide\nend                                    # hide","category":"page"},{"location":"DryGranular/kramers/#Industrial-cases","page":"Kramers' model","title":"Industrial cases","text":"","category":"section"},{"location":"DryGranular/kramers/","page":"Kramers' model","title":"Kramers' model","text":"The following illustrates a practical use case of the model. Next we scan a parameter space to confirm once again the model suitability as an alternative to analytical engineering estimations as per Peray's notebook.","category":"page"},{"location":"DryGranular/kramers/","page":"Kramers' model","title":"Kramers' model","text":"let                                                 # hide\n    ṁ = 33.6                                        # hide\n    ω = 0.85                                        # hide\n    _, _, f, ax, _ = aluminakiln(ṁ, ω, show = true) # hide\n    ax.yticks = 0.0:6.0:30.0                        # hide\n    ylims!(ax, extrema(ax.yticks.val))              # hide\n    f                                               # hide\nend                                                 # hide","category":"page"},{"location":"DryGranular/kramers/","page":"Kramers' model","title":"Kramers' model","text":"The following table confirms the expected values as per Peray.","category":"page"},{"location":"DryGranular/kramers/","page":"Kramers' model","title":"Kramers' model","text":"mdtable(scanaluminakiln(), latex=false) # hide","category":"page"},{"location":"DryMaterials/#DryMaterials","page":"DryMaterials","title":"DryMaterials","text":"","category":"section"},{"location":"DryMaterials/","page":"DryMaterials","title":"DryMaterials","text":"CurrentModule = DryMaterials","category":"page"},{"location":"DryMaterials/","page":"DryMaterials","title":"DryMaterials","text":"Modules = [ DryMaterials ]","category":"page"},{"location":"DryMaterials/#DryMaterials.H_AIR","page":"DryMaterials","title":"DryMaterials.H_AIR","text":"Coefficients for air enthalpy polynomial [J/kg].\n\n\n\n\n\n","category":"constant"},{"location":"DryMaterials/#DryMaterials.PureAir","page":"DryMaterials","title":"DryMaterials.PureAir","text":"Simple implementation of pure air for illustration purposes.\n\n\n\n\n\n","category":"type"},{"location":"DryMaterials/#DryMaterials.PureMineral","page":"DryMaterials","title":"DryMaterials.PureMineral","text":"Simple solid mineral material for illustration purposes.\n\n\n\n\n\n","category":"type"},{"location":"DryMaterials/#DryMaterials.PureWater","page":"DryMaterials","title":"DryMaterials.PureWater","text":"Simple implementation of liquid water for illustration purposes.\n\n\n\n\n\n","category":"type"},{"location":"DryMaterials/#DryMaterials.SolidMineralPhase","page":"DryMaterials","title":"DryMaterials.SolidMineralPhase","text":"Represents a solid mineral phase for thermodynamic calculations.\n\nname: Name of phase.\nρ: Specific mass of phase [kg/m³].\nM: Molecular mass of phase [kg/mol].\np: Polynomial properties of phase.\n\n\n\n\n\n","category":"type"},{"location":"DryMaterials/#DryMaterials.SolidPolynomialProperties","page":"DryMaterials","title":"DryMaterials.SolidPolynomialProperties","text":"Arbitrary Laurent polynomial specific heat and enthalpy of materials.\n\nc: Polynomial representation of specific heat [J/(kg.K)].\nh: Polynomial representation of enthalpy [J/kg].\nhₒ: Reference state enthalpy [J/kg].\n\n\n\n\n\n","category":"type"},{"location":"DryMaterials/#DryMaterials.density","page":"DryMaterials","title":"DryMaterials.density","text":"Evaluates the density of material [kg/m³].\n\n\n\n\n\n","category":"function"},{"location":"DryMaterials/#DryMaterials.enthalpy","page":"DryMaterials","title":"DryMaterials.enthalpy","text":"Evaluates the enthalpy of material [J/kg].\n\n\n\n\n\n","category":"function"},{"location":"DryMaterials/#DryMaterials.getamorphoussilica-Tuple{}","page":"DryMaterials","title":"DryMaterials.getamorphoussilica","text":"Representation of amorphous silica SiO_2(a).\n\nTODO recover missing defaults in Schieltz (1964).\n\n\n\n\n\n","category":"method"},{"location":"DryMaterials/#DryMaterials.getkaolinite-Tuple{}","page":"DryMaterials","title":"DryMaterials.getkaolinite","text":"Representation of Kaolinite Al_2Si_2O_5(OH)_4.\n\nTODO recover missing defaults in Schieltz (1964).\n\n\n\n\n\n","category":"method"},{"location":"DryMaterials/#DryMaterials.getmetakaolin-Tuple{}","page":"DryMaterials","title":"DryMaterials.getmetakaolin","text":"Representation of metakaolin Al_2Si_2O_7.\n\nTODO recover missing defaults in Schieltz (1964).\n\n\n\n\n\n","category":"method"},{"location":"DryMaterials/#DryMaterials.getspinel-Tuple{}","page":"DryMaterials","title":"DryMaterials.getspinel","text":"Representation of spinel Al_4Si_3O_12.\n\nTODO recover missing defaults (somewhere else, not in Schieltz (1964)).\n\n\n\n\n\n","category":"method"},{"location":"DryMaterials/#DryMaterials.molecularmass","page":"DryMaterials","title":"DryMaterials.molecularmass","text":"Retrieve molecular mass of materials [kg/mol].\n\n\n\n\n\n","category":"function"},{"location":"DryMaterials/#DryMaterials.specificheat","page":"DryMaterials","title":"DryMaterials.specificheat","text":"Evaluates the specific heat of materials [J/(kg.K)].\n\n\n\n\n\n","category":"function"}]
}
